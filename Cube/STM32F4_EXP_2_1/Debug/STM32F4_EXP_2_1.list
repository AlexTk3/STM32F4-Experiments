
STM32F4_EXP_2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000604c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800629c  0800629c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a4  080062a4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080062ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000009c  08006348  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08006348  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7ec  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001935  00000000  00000000  0002b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d6e  00000000  00000000  0002e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c961  00000000  00000000  000441ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008774a  00000000  00000000  00050b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b88  00000000  00000000  000d82ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061d4 	.word	0x080061d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	080061d4 	.word	0x080061d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb73 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f901 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f9b7 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f95d 	bl	8000854 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f989 	bl	80008b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t i = 0, ret;
 800059e:	2300      	movs	r3, #0
 80005a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 fbd6 	bl	8000d58 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 1000);
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	221a      	movs	r2, #26
 80005b2:	496a      	ldr	r1, [pc, #424]	; (800075c <main+0x1d8>)
 80005b4:	486a      	ldr	r0, [pc, #424]	; (8000760 <main+0x1dc>)
 80005b6:	f004 f996 	bl	80048e6 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80005ba:	2301      	movs	r3, #1
 80005bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80005c0:	e03d      	b.n	800063e <main+0xba>
  {
  	ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80005c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	b299      	uxth	r1, r3
 80005cc:	2305      	movs	r3, #5
 80005ce:	2203      	movs	r2, #3
 80005d0:	4864      	ldr	r0, [pc, #400]	; (8000764 <main+0x1e0>)
 80005d2:	f001 fb7f 	bl	8001cd4 <HAL_I2C_IsDeviceReady>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  	if (ret != HAL_OK) /* No ACK Received At That Address */
 80005dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d007      	beq.n	80005f4 <main+0x70>
   	{
    	HAL_UART_Transmit(&huart1, Space, sizeof(Space), 1000);
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	2204      	movs	r2, #4
 80005ea:	495f      	ldr	r1, [pc, #380]	; (8000768 <main+0x1e4>)
 80005ec:	485c      	ldr	r0, [pc, #368]	; (8000760 <main+0x1dc>)
 80005ee:	f004 f97a 	bl	80048e6 <HAL_UART_Transmit>
 80005f2:	e011      	b.n	8000618 <main+0x94>
    }
  	else if(ret == HAL_OK)
 80005f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10d      	bne.n	8000618 <main+0x94>
   	{
    	sprintf(Buffer, "0x%X", i);
 80005fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000600:	461a      	mov	r2, r3
 8000602:	495a      	ldr	r1, [pc, #360]	; (800076c <main+0x1e8>)
 8000604:	485a      	ldr	r0, [pc, #360]	; (8000770 <main+0x1ec>)
 8000606:	f005 f977 	bl	80058f8 <siprintf>
    	HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 1000);
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	2219      	movs	r2, #25
 8000610:	4957      	ldr	r1, [pc, #348]	; (8000770 <main+0x1ec>)
 8000612:	4853      	ldr	r0, [pc, #332]	; (8000760 <main+0x1dc>)
 8000614:	f004 f967 	bl	80048e6 <HAL_UART_Transmit>
    }
  	if(i%8==0)HAL_UART_Transmit(&huart1, "\n\r", sizeof("\n\r"), 1000);
 8000618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800061c:	f003 0307 	and.w	r3, r3, #7
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d106      	bne.n	8000634 <main+0xb0>
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	2203      	movs	r2, #3
 800062c:	4951      	ldr	r1, [pc, #324]	; (8000774 <main+0x1f0>)
 800062e:	484c      	ldr	r0, [pc, #304]	; (8000760 <main+0x1dc>)
 8000630:	f004 f959 	bl	80048e6 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000638:	3301      	adds	r3, #1
 800063a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800063e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000642:	2b00      	cmp	r3, #0
 8000644:	dabd      	bge.n	80005c2 <main+0x3e>
  }
  HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 1000);
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	220b      	movs	r2, #11
 800064c:	494a      	ldr	r1, [pc, #296]	; (8000778 <main+0x1f4>)
 800064e:	4844      	ldr	r0, [pc, #272]	; (8000760 <main+0x1dc>)
 8000650:	f004 f949 	bl	80048e6 <HAL_UART_Transmit>
  /*--[ Scanning Done ]--*/

  const char wmsg[] = "Some data\n\r";
 8000654:	4a49      	ldr	r2, [pc, #292]	; (800077c <main+0x1f8>)
 8000656:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800065a:	ca07      	ldmia	r2, {r0, r1, r2}
 800065c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char rmsg[sizeof(wmsg)];
  //uint8_t str;
  // HAL expects address to be shifted one bit to the left
  uint16_t devAddr = 0x68;
 8000660:	2368      	movs	r3, #104	; 0x68
 8000662:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t memAddr = 0x0100;
 8000666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  HAL_StatusTypeDef status;
  HAL_UART_Transmit(&huart1, "\n\rStart test!\n\r", sizeof("\n\rStart test!\n\r"),
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	2210      	movs	r2, #16
 8000674:	4942      	ldr	r1, [pc, #264]	; (8000780 <main+0x1fc>)
 8000676:	483a      	ldr	r0, [pc, #232]	; (8000760 <main+0x1dc>)
 8000678:	f004 f935 	bl	80048e6 <HAL_UART_Transmit>
		  1000);
  // Hint: try to comment this line
  status = HAL_I2C_Mem_Write(&hi2c1, devAddr, memAddr, I2C_MEMADD_SIZE_16BIT,
 800067c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000680:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	230c      	movs	r3, #12
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2310      	movs	r3, #16
 8000696:	4833      	ldr	r0, [pc, #204]	; (8000764 <main+0x1e0>)
 8000698:	f000 fffc 	bl	8001694 <HAL_I2C_Mem_Write>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  	(uint8_t*)wmsg, sizeof(wmsg), 1000);

  //snprintf()
  /*HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str),
    		  1000);*/
  HAL_UART_Transmit(&huart1, "\n\rWrite\n\r", sizeof("\n\rWrite\n\r"),
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	220a      	movs	r2, #10
 80006a8:	4936      	ldr	r1, [pc, #216]	; (8000784 <main+0x200>)
 80006aa:	482d      	ldr	r0, [pc, #180]	; (8000760 <main+0x1dc>)
 80006ac:	f004 f91b 	bl	80048e6 <HAL_UART_Transmit>
	  status = HAL_I2C_IsDeviceReady(&hi2c1, devAddr, 1,
      	1000);
      if(status == HAL_OK) break;
  }*/

  status = HAL_I2C_Mem_Read(&hi2c1, devAddr, memAddr, I2C_MEMADD_SIZE_16BIT,
 80006b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80006b4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80006b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	230c      	movs	r3, #12
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2310      	movs	r3, #16
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <main+0x1e0>)
 80006cc:	f001 f8dc 	bl	8001888 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  	(uint8_t*)rmsg, sizeof(rmsg), 1000);

  /*HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str),
      		  1000);*/
  HAL_UART_Transmit(&huart1, "\n\rRead\n\r", sizeof("\n\rRead\n\r"),
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	2209      	movs	r2, #9
 80006dc:	492a      	ldr	r1, [pc, #168]	; (8000788 <main+0x204>)
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <main+0x1dc>)
 80006e0:	f004 f901 	bl	80048e6 <HAL_UART_Transmit>
		  1000);
  HAL_UART_Transmit(&huart1, (uint8_t*)wmsg, sizeof(wmsg),
 80006e4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ec:	220c      	movs	r2, #12
 80006ee:	481c      	ldr	r0, [pc, #112]	; (8000760 <main+0x1dc>)
 80006f0:	f004 f8f9 	bl	80048e6 <HAL_UART_Transmit>
  		  1000);
  HAL_UART_Transmit(&huart1, (uint8_t*)rmsg, sizeof(rmsg),
 80006f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	220c      	movs	r2, #12
 80006fe:	4818      	ldr	r0, [pc, #96]	; (8000760 <main+0x1dc>)
 8000700:	f004 f8f1 	bl	80048e6 <HAL_UART_Transmit>
  		  1000);
  if(memcmp(rmsg, wmsg, sizeof(rmsg)) == 0)
 8000704:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070c:	220c      	movs	r2, #12
 800070e:	4618      	mov	r0, r3
 8000710:	f005 f8da 	bl	80058c8 <memcmp>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d111      	bne.n	800073e <main+0x1ba>
  {
  	const char result[] = "Test passed!\r\n";
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <main+0x208>)
 800071c:	f107 0418 	add.w	r4, r7, #24
 8000720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000722:	c407      	stmia	r4!, {r0, r1, r2}
 8000724:	8023      	strh	r3, [r4, #0]
 8000726:	3402      	adds	r4, #2
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	7023      	strb	r3, [r4, #0]
  	HAL_UART_Transmit(&huart1, (uint8_t*)result, sizeof(result)-1,
 800072c:	f107 0118 	add.w	r1, r7, #24
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	220e      	movs	r2, #14
 8000736:	480a      	ldr	r0, [pc, #40]	; (8000760 <main+0x1dc>)
 8000738:	f004 f8d5 	bl	80048e6 <HAL_UART_Transmit>
 800073c:	e00d      	b.n	800075a <main+0x1d6>
  			1000);
  } else {
  	const char result[] = "Test failed :(\r\n";
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <main+0x20c>)
 8000740:	1d3c      	adds	r4, r7, #4
 8000742:	461d      	mov	r5, r3
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000748:	682b      	ldr	r3, [r5, #0]
 800074a:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)result, sizeof(result)-1,
 800074c:	1d39      	adds	r1, r7, #4
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	2210      	movs	r2, #16
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <main+0x1dc>)
 8000756:	f004 f8c6 	bl	80048e6 <HAL_UART_Transmit>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075a:	e7fe      	b.n	800075a <main+0x1d6>
 800075c:	20000004 	.word	0x20000004
 8000760:	2000010c 	.word	0x2000010c
 8000764:	200000b8 	.word	0x200000b8
 8000768:	20000000 	.word	0x20000000
 800076c:	080061ec 	.word	0x080061ec
 8000770:	20000150 	.word	0x20000150
 8000774:	080061f4 	.word	0x080061f4
 8000778:	20000020 	.word	0x20000020
 800077c:	08006220 	.word	0x08006220
 8000780:	080061f8 	.word	0x080061f8
 8000784:	08006208 	.word	0x08006208
 8000788:	08006214 	.word	0x08006214
 800078c:	0800622c 	.word	0x0800622c
 8000790:	0800623c 	.word	0x0800623c

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 f8a0 	bl	80058e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <SystemClock_Config+0xb8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <SystemClock_Config+0xb8>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <SystemClock_Config+0xb8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <SystemClock_Config+0xbc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <SystemClock_Config+0xbc>)
 80007e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <SystemClock_Config+0xbc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fbc7 	bl	8003f9c <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000814:	f000 f89e 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fe2a 	bl	800448c <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800083e:	f000 f889 	bl	8000954 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f000 fdbb 	bl	800140c <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f85a 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000b8 	.word	0x200000b8
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e8:	f003 ffb0 	bl	800484c <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f82f 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000010c 	.word	0x2000010c
 8000900:	40011000 	.word	0x40011000

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_GPIO_Init+0x4c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MX_GPIO_Init+0x4c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_GPIO_Init+0x4c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_GPIO_Init+0x4c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <MX_GPIO_Init+0x4c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_GPIO_Init+0x4c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <HAL_I2C_MspInit+0xa4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d13b      	bne.n	8000a4a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23c0      	movs	r3, #192	; 0xc0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fe:	2304      	movs	r3, #4
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4814      	ldr	r0, [pc, #80]	; (8000a5c <HAL_I2C_MspInit+0xac>)
 8000a0a:	f000 fb7b 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	201f      	movs	r0, #31
 8000a30:	f000 fa91 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a34:	201f      	movs	r0, #31
 8000a36:	f000 faaa 	bl	8000f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2020      	movs	r0, #32
 8000a40:	f000 fa89 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a44:	2020      	movs	r0, #32
 8000a46:	f000 faa2 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_UART_MspInit+0x94>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d134      	bne.n	8000aec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000acc:	2307      	movs	r3, #7
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <HAL_UART_MspInit+0x9c>)
 8000ad8:	f000 fb14 	bl	8001104 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2025      	movs	r0, #37	; 0x25
 8000ae2:	f000 fa38 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae6:	2025      	movs	r0, #37	; 0x25
 8000ae8:	f000 fa51 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f8e4 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <I2C1_EV_IRQHandler+0x10>)
 8000b5a:	f001 f9e9 	bl	8001f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000b8 	.word	0x200000b8

08000b68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <I2C1_ER_IRQHandler+0x10>)
 8000b6e:	f001 fb50 	bl	8002212 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000b8 	.word	0x200000b8

08000b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USART1_IRQHandler+0x10>)
 8000b82:	f003 ff43 	bl	8004a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000010c 	.word	0x2000010c

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f004 fe58 	bl	8005874 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20010000 	.word	0x20010000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	2000016c 	.word	0x2000016c
 8000bf8:	20000188 	.word	0x20000188

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f004 fe17 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc97 	bl	8000584 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000c64:	080062ac 	.word	0x080062ac
  ldr r2, =_sbss
 8000c68:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000c6c:	20000184 	.word	0x20000184

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe5a 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000002c 	.word	0x2000002c
 8000d10:	20000034 	.word	0x20000034
 8000d14:	20000030 	.word	0x20000030

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000034 	.word	0x20000034
 8000d3c:	20000170 	.word	0x20000170

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000170 	.word	0x20000170

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000034 	.word	0x20000034

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff feb6 	bl	8000d40 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d008      	beq.n	8000ff4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e052      	b.n	800109a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0216 	bic.w	r2, r2, #22
 8001002:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001012:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <HAL_DMA_Abort+0x62>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0208 	bic.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001044:	e013      	b.n	800106e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001046:	f7ff fe7b 	bl	8000d40 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b05      	cmp	r3, #5
 8001052:	d90c      	bls.n	800106e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2220      	movs	r2, #32
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e015      	b.n	800109a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e4      	bne.n	8001046 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	223f      	movs	r2, #63	; 0x3f
 8001082:	409a      	lsls	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d004      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e00c      	b.n	80010da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2205      	movs	r2, #5
 80010c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e159      	b.n	80013d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8148 	bne.w	80013ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a2 	beq.w	80013ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x202>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1fe>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a47      	ldr	r2, [pc, #284]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1f6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_GPIO_Init+0x300>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1f2>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_GPIO_Init+0x304>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f aea2 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e12b      	b.n	8001676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fabc 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2224      	movs	r2, #36	; 0x24
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800145e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800146e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001470:	f003 f9c4 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 8001474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a81      	ldr	r2, [pc, #516]	; (8001680 <HAL_I2C_Init+0x274>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d807      	bhi.n	8001490 <HAL_I2C_Init+0x84>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a80      	ldr	r2, [pc, #512]	; (8001684 <HAL_I2C_Init+0x278>)
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	e006      	b.n	800149e <HAL_I2C_Init+0x92>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a7d      	ldr	r2, [pc, #500]	; (8001688 <HAL_I2C_Init+0x27c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	bf94      	ite	ls
 8001498:	2301      	movls	r3, #1
 800149a:	2300      	movhi	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0e7      	b.n	8001676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <HAL_I2C_Init+0x280>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9b      	lsrs	r3, r3, #18
 80014b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	; (8001680 <HAL_I2C_Init+0x274>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d802      	bhi.n	80014e0 <HAL_I2C_Init+0xd4>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	e009      	b.n	80014f4 <HAL_I2C_Init+0xe8>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <HAL_I2C_Init+0x284>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	3301      	adds	r3, #1
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	495c      	ldr	r1, [pc, #368]	; (8001680 <HAL_I2C_Init+0x274>)
 8001510:	428b      	cmp	r3, r1
 8001512:	d819      	bhi.n	8001548 <HAL_I2C_Init+0x13c>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e59      	subs	r1, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001522:	1c59      	adds	r1, r3, #1
 8001524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001528:	400b      	ands	r3, r1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <HAL_I2C_Init+0x138>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e59      	subs	r1, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
 800153c:	3301      	adds	r3, #1
 800153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001542:	e051      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 8001544:	2304      	movs	r3, #4
 8001546:	e04f      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d111      	bne.n	8001574 <HAL_I2C_Init+0x168>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e58      	subs	r0, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e012      	b.n	800159a <HAL_I2C_Init+0x18e>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1e58      	subs	r0, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	0099      	lsls	r1, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Init+0x196>
 800159e:	2301      	movs	r3, #1
 80015a0:	e022      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10e      	bne.n	80015c8 <HAL_I2C_Init+0x1bc>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e58      	subs	r0, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	440b      	add	r3, r1
 80015b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6809      	ldr	r1, [r1, #0]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6911      	ldr	r1, [r2, #16]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68d2      	ldr	r2, [r2, #12]
 8001622:	4311      	orrs	r1, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	000186a0 	.word	0x000186a0
 8001684:	001e847f 	.word	0x001e847f
 8001688:	003d08ff 	.word	0x003d08ff
 800168c:	431bde83 	.word	0x431bde83
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af02      	add	r7, sp, #8
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	817b      	strh	r3, [r7, #10]
 80016a6:	460b      	mov	r3, r1
 80016a8:	813b      	strh	r3, [r7, #8]
 80016aa:	4613      	mov	r3, r2
 80016ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ae:	f7ff fb47 	bl	8000d40 <HAL_GetTick>
 80016b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b20      	cmp	r3, #32
 80016be:	f040 80d9 	bne.w	8001874 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2319      	movs	r3, #25
 80016c8:	2201      	movs	r2, #1
 80016ca:	496d      	ldr	r1, [pc, #436]	; (8001880 <HAL_I2C_Mem_Write+0x1ec>)
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f002 fa3b 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
 80016da:	e0cc      	b.n	8001876 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_I2C_Mem_Write+0x56>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e0c5      	b.n	8001876 <HAL_I2C_Mem_Write+0x1e2>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d007      	beq.n	8001710 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2221      	movs	r2, #33	; 0x21
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a3a      	ldr	r2, [r7, #32]
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4a4d      	ldr	r2, [pc, #308]	; (8001884 <HAL_I2C_Mem_Write+0x1f0>)
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001752:	88f8      	ldrh	r0, [r7, #6]
 8001754:	893a      	ldrh	r2, [r7, #8]
 8001756:	8979      	ldrh	r1, [r7, #10]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4603      	mov	r3, r0
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f001 ffca 	bl	80036fc <I2C_RequestMemoryWrite>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d052      	beq.n	8001814 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e081      	b.n	8001876 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f002 fabc 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00d      	beq.n	800179e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b04      	cmp	r3, #4
 8001788:	d107      	bne.n	800179a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001798:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06b      	b.n	8001876 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d11b      	bne.n	8001814 <HAL_I2C_Mem_Write+0x180>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d017      	beq.n	8001814 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1aa      	bne.n	8001772 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f002 faa8 	bl	8003d76 <I2C_WaitOnBTFFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00d      	beq.n	8001848 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2b04      	cmp	r3, #4
 8001832:	d107      	bne.n	8001844 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001842:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e016      	b.n	8001876 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	00100002 	.word	0x00100002
 8001884:	ffff0000 	.word	0xffff0000

08001888 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	817b      	strh	r3, [r7, #10]
 800189a:	460b      	mov	r3, r1
 800189c:	813b      	strh	r3, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018a2:	f7ff fa4d 	bl	8000d40 <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	f040 8208 	bne.w	8001cc6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2319      	movs	r3, #25
 80018bc:	2201      	movs	r2, #1
 80018be:	497b      	ldr	r1, [pc, #492]	; (8001aac <HAL_I2C_Mem_Read+0x224>)
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f002 f941 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	e1fb      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_I2C_Mem_Read+0x56>
 80018da:	2302      	movs	r3, #2
 80018dc:	e1f4      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d007      	beq.n	8001904 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001912:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2222      	movs	r2, #34	; 0x22
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_I2C_Mem_Read+0x228>)
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001946:	88f8      	ldrh	r0, [r7, #6]
 8001948:	893a      	ldrh	r2, [r7, #8]
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	4603      	mov	r3, r0
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f001 ff66 	bl	8003828 <I2C_RequestMemoryRead>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1b0      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	2b00      	cmp	r3, #0
 800196c:	d113      	bne.n	8001996 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	623b      	str	r3, [r7, #32]
 8001982:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e184      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	2b01      	cmp	r3, #1
 800199c:	d11b      	bne.n	80019d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e164      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d11b      	bne.n	8001a16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	e144      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a2c:	e138      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	f200 80f1 	bhi.w	8001c1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d123      	bne.n	8001a88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f002 fa09 	bl	8003e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e139      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a86:	e10b      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d14e      	bne.n	8001b2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a96:	2200      	movs	r2, #0
 8001a98:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <HAL_I2C_Mem_Read+0x22c>)
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f002 f854 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e10e      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
 8001aaa:	bf00      	nop
 8001aac:	00100002 	.word	0x00100002
 8001ab0:	ffff0000 	.word	0xffff0000
 8001ab4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b2c:	e0b8      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b34:	2200      	movs	r2, #0
 8001b36:	4966      	ldr	r1, [pc, #408]	; (8001cd0 <HAL_I2C_Mem_Read+0x448>)
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f002 f805 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0bf      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	2200      	movs	r2, #0
 8001b92:	494f      	ldr	r1, [pc, #316]	; (8001cd0 <HAL_I2C_Mem_Read+0x448>)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f001 ffd7 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e091      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c18:	e042      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f002 f91c 	bl	8003e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e04c      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d118      	bne.n	8001ca0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f47f aec2 	bne.w	8001a2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	00010004 	.word	0x00010004

08001cd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff f82c 	bl	8000d40 <HAL_GetTick>
 8001ce8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	f040 8111 	bne.w	8001f1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2319      	movs	r3, #25
 8001d02:	2201      	movs	r2, #1
 8001d04:	4988      	ldr	r1, [pc, #544]	; (8001f28 <HAL_I2C_IsDeviceReady+0x254>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f001 ff1e 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
 8001d14:	e104      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_I2C_IsDeviceReady+0x50>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e0fd      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d007      	beq.n	8001d4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2224      	movs	r2, #36	; 0x24
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4a70      	ldr	r2, [pc, #448]	; (8001f2c <HAL_I2C_IsDeviceReady+0x258>)
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f001 fedc 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da4:	d103      	bne.n	8001dae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0b6      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe ffbd 	bl	8000d40 <HAL_GetTick>
 8001dc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001df6:	e025      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001df8:	f7fe ffa2 	bl	8000d40 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <HAL_I2C_IsDeviceReady+0x13a>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	22a0      	movs	r2, #160	; 0xa0
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2ba0      	cmp	r3, #160	; 0xa0
 8001e4e:	d005      	beq.n	8001e5c <HAL_I2C_IsDeviceReady+0x188>
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_I2C_IsDeviceReady+0x188>
 8001e56:	7dbb      	ldrb	r3, [r7, #22]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0cd      	beq.n	8001df8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d129      	bne.n	8001ec6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2319      	movs	r3, #25
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4921      	ldr	r1, [pc, #132]	; (8001f28 <HAL_I2C_IsDeviceReady+0x254>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f001 fe50 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e036      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e02c      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ede:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2319      	movs	r3, #25
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	490f      	ldr	r1, [pc, #60]	; (8001f28 <HAL_I2C_IsDeviceReady+0x254>)
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f001 fe2c 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e012      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f4ff af32 	bcc.w	8001d6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
  }
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00100002 	.word	0x00100002
 8001f2c:	ffff0000 	.word	0xffff0000

08001f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d003      	beq.n	8001f68 <HAL_I2C_EV_IRQHandler+0x38>
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b40      	cmp	r3, #64	; 0x40
 8001f64:	f040 80c1 	bne.w	80020ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_I2C_EV_IRQHandler+0x6e>
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f88:	d003      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x62>
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_EV_IRQHandler+0x66>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_EV_IRQHandler+0x68>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	f000 8132 	beq.w	8002202 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00c      	beq.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x92>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f001 ffd6 	bl	8003f66 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fd83 	bl	8002ac6 <I2C_Master_SB>
 8001fc0:	e092      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0xb2>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	0a5b      	lsrs	r3, r3, #9
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fdf9 	bl	8002bd2 <I2C_Master_ADD10>
 8001fe0:	e082      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0xd2>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fe13 	bl	8002c26 <I2C_Master_ADDR>
 8002000:	e072      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03b      	beq.n	8002086 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800201c:	f000 80f3 	beq.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	09db      	lsrs	r3, r3, #7
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00f      	beq.n	800204c <HAL_I2C_EV_IRQHandler+0x11c>
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_I2C_EV_IRQHandler+0x11c>
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9f3 	bl	8002430 <I2C_MasterTransmit_TXE>
 800204a:	e04d      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80d6 	beq.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	0a5b      	lsrs	r3, r3, #9
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80cf 	beq.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002068:	7bbb      	ldrb	r3, [r7, #14]
 800206a:	2b21      	cmp	r3, #33	; 0x21
 800206c:	d103      	bne.n	8002076 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa7a 	bl	8002568 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002074:	e0c7      	b.n	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	f040 80c4 	bne.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fae8 	bl	8002654 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002084:	e0bf      	b.n	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002094:	f000 80b7 	beq.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00f      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0x194>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0x194>
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fb5d 	bl	800277c <I2C_MasterReceive_RXNE>
 80020c2:	e011      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 809a 	beq.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	0a5b      	lsrs	r3, r3, #9
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8093 	beq.w	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fc06 	bl	80028f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e6:	e08e      	b.n	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
 80020e8:	e08d      	b.n	8002206 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e007      	b.n	800210c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x20e>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002134:	69b9      	ldr	r1, [r7, #24]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 ffc4 	bl	80030c4 <I2C_Slave_ADDR>
 800213c:	e066      	b.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x22e>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	0a5b      	lsrs	r3, r3, #9
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fffe 	bl	8003158 <I2C_Slave_STOPF>
 800215c:	e056      	b.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800215e:	7bbb      	ldrb	r3, [r7, #14]
 8002160:	2b21      	cmp	r3, #33	; 0x21
 8002162:	d002      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x23a>
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	2b29      	cmp	r3, #41	; 0x29
 8002168:	d125      	bne.n	80021b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	09db      	lsrs	r3, r3, #7
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00f      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x266>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0a9b      	lsrs	r3, r3, #10
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x266>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 feda 	bl	8002f48 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002194:	e039      	b.n	800220a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d033      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x2da>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	0a5b      	lsrs	r3, r3, #9
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02d      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 ff07 	bl	8002fc2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021b4:	e029      	b.n	800220a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00f      	beq.n	80021e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	0a9b      	lsrs	r3, r3, #10
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 ff12 	bl	8003004 <I2C_SlaveReceive_RXNE>
 80021e0:	e014      	b.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00e      	beq.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	0a5b      	lsrs	r3, r3, #9
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 ff40 	bl	8003080 <I2C_SlaveReceive_BTF>
 8002200:	e004      	b.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002202:	bf00      	nop
 8002204:	e002      	b.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002206:	bf00      	nop
 8002208:	e000      	b.n	800220c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800220a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b08a      	sub	sp, #40	; 0x28
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002234:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00e      	beq.n	8002260 <HAL_I2C_ER_IRQHandler+0x4e>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800225e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	0a5b      	lsrs	r3, r3, #9
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <HAL_I2C_ER_IRQHandler+0x78>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002288:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	0a9b      	lsrs	r3, r3, #10
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03f      	beq.n	8002316 <HAL_I2C_ER_IRQHandler+0x104>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d039      	beq.n	8002316 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80022a2:	7efb      	ldrb	r3, [r7, #27]
 80022a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022bc:	7ebb      	ldrb	r3, [r7, #26]
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d112      	bne.n	80022e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b21      	cmp	r3, #33	; 0x21
 80022cc:	d008      	beq.n	80022e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b29      	cmp	r3, #41	; 0x29
 80022d2:	d005      	beq.n	80022e0 <HAL_I2C_ER_IRQHandler+0xce>
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b28      	cmp	r3, #40	; 0x28
 80022d8:	d106      	bne.n	80022e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b21      	cmp	r3, #33	; 0x21
 80022de:	d103      	bne.n	80022e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f001 f869 	bl	80033b8 <I2C_Slave_AF>
 80022e6:	e016      	b.n	8002316 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022fa:	7efb      	ldrb	r3, [r7, #27]
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d002      	beq.n	8002306 <HAL_I2C_ER_IRQHandler+0xf4>
 8002300:	7efb      	ldrb	r3, [r7, #27]
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d107      	bne.n	8002316 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	0adb      	lsrs	r3, r3, #11
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x12e>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800233e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f001 f8a0 	bl	8003498 <I2C_ITError>
  }
}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
 80023bc:	4613      	mov	r3, r2
 80023be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	d150      	bne.n	80024f8 <I2C_MasterTransmit_TXE+0xc8>
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b21      	cmp	r3, #33	; 0x21
 800245a:	d14d      	bne.n	80024f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d01d      	beq.n	800249e <I2C_MasterTransmit_TXE+0x6e>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b20      	cmp	r3, #32
 8002466:	d01a      	beq.n	800249e <I2C_MasterTransmit_TXE+0x6e>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800246e:	d016      	beq.n	800249e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800247e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2211      	movs	r2, #17
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff62 	bl	8002360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800249c:	e060      	b.n	8002560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d107      	bne.n	80024e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff7d 	bl	80023e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024e6:	e03b      	b.n	8002560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff35 	bl	8002360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024f6:	e033      	b.n	8002560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b21      	cmp	r3, #33	; 0x21
 80024fc:	d005      	beq.n	800250a <I2C_MasterTransmit_TXE+0xda>
 80024fe:	7bbb      	ldrb	r3, [r7, #14]
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d12d      	bne.n	8002560 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b22      	cmp	r3, #34	; 0x22
 8002508:	d12a      	bne.n	8002560 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d108      	bne.n	8002526 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002524:	e01c      	b.n	8002560 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d103      	bne.n	800253a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f88e 	bl	8002654 <I2C_MemoryTransmit_TXE_BTF>
}
 8002538:	e012      	b.n	8002560 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800255e:	e7ff      	b.n	8002560 <I2C_MasterTransmit_TXE+0x130>
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b21      	cmp	r3, #33	; 0x21
 8002580:	d164      	bne.n	800264c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025b0:	e04c      	b.n	800264c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d01d      	beq.n	80025f4 <I2C_MasterTransmit_BTF+0x8c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d01a      	beq.n	80025f4 <I2C_MasterTransmit_BTF+0x8c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025c4:	d016      	beq.n	80025f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2211      	movs	r2, #17
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff feb7 	bl	8002360 <HAL_I2C_MasterTxCpltCallback>
}
 80025f2:	e02b      	b.n	800264c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002602:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d107      	bne.n	800263e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fed2 	bl	80023e0 <HAL_I2C_MemTxCpltCallback>
}
 800263c:	e006      	b.n	800264c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fe8a 	bl	8002360 <HAL_I2C_MasterTxCpltCallback>
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11d      	bne.n	80026a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10b      	bne.n	800268c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800268a:	e073      	b.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002690:	b29b      	uxth	r3, r3
 8002692:	121b      	asrs	r3, r3, #8
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026a6:	e065      	b.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10b      	bne.n	80026c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026c6:	e055      	b.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d151      	bne.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b22      	cmp	r3, #34	; 0x22
 80026d4:	d10d      	bne.n	80026f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026f0:	e040      	b.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b21      	cmp	r3, #33	; 0x21
 8002700:	d112      	bne.n	8002728 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002726:	e025      	b.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d120      	bne.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b21      	cmp	r3, #33	; 0x21
 8002736:	d11d      	bne.n	8002774 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002746:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fe36 	bl	80023e0 <HAL_I2C_MemTxCpltCallback>
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b22      	cmp	r3, #34	; 0x22
 800278e:	f040 80ac 	bne.w	80028ea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d921      	bls.n	80027e4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	f040 808c 	bne.w	80028ea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80027e2:	e082      	b.n	80028ea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d075      	beq.n	80028d8 <I2C_MasterReceive_RXNE+0x15c>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <I2C_MasterReceive_RXNE+0x7c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d16f      	bne.n	80028d8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f001 fafd 	bl	8003df8 <I2C_WaitOnSTOPRequestThroughIT>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d142      	bne.n	800288a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002812:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002822:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d10a      	bne.n	8002874 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fdc1 	bl	80023f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002872:	e03a      	b.n	80028ea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2212      	movs	r2, #18
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fd76 	bl	8002374 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002888:	e02f      	b.n	80028ea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002898:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fd99 	bl	8002408 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028d6:	e008      	b.n	80028ea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e6:	605a      	str	r2, [r3, #4]
}
 80028e8:	e7ff      	b.n	80028ea <I2C_MasterReceive_RXNE+0x16e>
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b04      	cmp	r3, #4
 8002908:	d11b      	bne.n	8002942 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002918:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002940:	e0bd      	b.n	8002abe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d129      	bne.n	80029a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d00a      	beq.n	8002978 <I2C_MasterReceive_BTF+0x86>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d007      	beq.n	8002978 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002976:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800299e:	e08e      	b.n	8002abe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d176      	bne.n	8002a98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d002      	beq.n	80029b6 <I2C_MasterReceive_BTF+0xc4>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d108      	bne.n	80029c8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e019      	b.n	80029fc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <I2C_MasterReceive_BTF+0xe2>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d108      	bne.n	80029e6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e00a      	b.n	80029fc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d007      	beq.n	80029fc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d10a      	bne.n	8002a82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fcba 	bl	80023f4 <HAL_I2C_MemRxCpltCallback>
}
 8002a80:	e01d      	b.n	8002abe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2212      	movs	r2, #18
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fc6f 	bl	8002374 <HAL_I2C_MasterRxCpltCallback>
}
 8002a96:	e012      	b.n	8002abe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d117      	bne.n	8002b0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002af4:	e067      	b.n	8002bc6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
}
 8002b08:	e05d      	b.n	8002bc6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b12:	d133      	bne.n	8002b7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b21      	cmp	r3, #33	; 0x21
 8002b1e:	d109      	bne.n	8002b34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b30:	611a      	str	r2, [r3, #16]
 8002b32:	e008      	b.n	8002b46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <I2C_Master_SB+0x92>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d108      	bne.n	8002b6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d032      	beq.n	8002bc6 <I2C_Master_SB+0x100>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02d      	beq.n	8002bc6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b78:	605a      	str	r2, [r3, #4]
}
 8002b7a:	e024      	b.n	8002bc6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10e      	bne.n	8002ba2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	11db      	asrs	r3, r3, #7
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 0306 	and.w	r3, r3, #6
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f063 030f 	orn	r3, r3, #15
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
}
 8002ba0:	e011      	b.n	8002bc6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10d      	bne.n	8002bc6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	11db      	asrs	r3, r3, #7
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0306 	and.w	r3, r3, #6
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f063 030e 	orn	r3, r3, #14
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <I2C_Master_ADD10+0x26>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d108      	bne.n	8002c0a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <I2C_Master_ADD10+0x48>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c18:	605a      	str	r2, [r3, #4]
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b091      	sub	sp, #68	; 0x44
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b22      	cmp	r3, #34	; 0x22
 8002c4e:	f040 8169 	bne.w	8002f24 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <I2C_Master_ADDR+0x54>
 8002c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d10b      	bne.n	8002c7a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	e160      	b.n	8002f3c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11d      	bne.n	8002cbe <I2C_Master_ADDR+0x98>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c8a:	d118      	bne.n	8002cbe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	651a      	str	r2, [r3, #80]	; 0x50
 8002cbc:	e13e      	b.n	8002f3c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d113      	bne.n	8002cf0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e115      	b.n	8002f1c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 808a 	bne.w	8002e10 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d02:	d137      	bne.n	8002d74 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d12:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d22:	d113      	bne.n	8002d4c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	e0e7      	b.n	8002f1c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e0d3      	b.n	8002f1c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d02e      	beq.n	8002dd8 <I2C_Master_ADDR+0x1b2>
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d02b      	beq.n	8002dd8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	2b12      	cmp	r3, #18
 8002d84:	d102      	bne.n	8002d8c <I2C_Master_ADDR+0x166>
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d125      	bne.n	8002dd8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00e      	beq.n	8002db0 <I2C_Master_ADDR+0x18a>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d00b      	beq.n	8002db0 <I2C_Master_ADDR+0x18a>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d008      	beq.n	8002db0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e007      	b.n	8002dc0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dbe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	e0a1      	b.n	8002f1c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e085      	b.n	8002f1c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d14d      	bne.n	8002eb6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d016      	beq.n	8002e4e <I2C_Master_ADDR+0x228>
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d013      	beq.n	8002e4e <I2C_Master_ADDR+0x228>
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d010      	beq.n	8002e4e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e007      	b.n	8002e5e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6c:	d117      	bne.n	8002e9e <I2C_Master_ADDR+0x278>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e74:	d00b      	beq.n	8002e8e <I2C_Master_ADDR+0x268>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d008      	beq.n	8002e8e <I2C_Master_ADDR+0x268>
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d005      	beq.n	8002e8e <I2C_Master_ADDR+0x268>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d002      	beq.n	8002e8e <I2C_Master_ADDR+0x268>
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d107      	bne.n	8002e9e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	e032      	b.n	8002f1c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed4:	d117      	bne.n	8002f06 <I2C_Master_ADDR+0x2e0>
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002edc:	d00b      	beq.n	8002ef6 <I2C_Master_ADDR+0x2d0>
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d008      	beq.n	8002ef6 <I2C_Master_ADDR+0x2d0>
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d005      	beq.n	8002ef6 <I2C_Master_ADDR+0x2d0>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d002      	beq.n	8002ef6 <I2C_Master_ADDR+0x2d0>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d107      	bne.n	8002f06 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f22:	e00b      	b.n	8002f3c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
}
 8002f3a:	e7ff      	b.n	8002f3c <I2C_Master_ADDR+0x316>
 8002f3c:	bf00      	nop
 8002f3e:	3744      	adds	r7, #68	; 0x44
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d02b      	beq.n	8002fba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d114      	bne.n	8002fba <I2C_SlaveTransmit_TXE+0x72>
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b29      	cmp	r3, #41	; 0x29
 8002f94:	d111      	bne.n	8002fba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2228      	movs	r2, #40	; 0x28
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff f9e7 	bl	8002388 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d011      	beq.n	8002ff8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02c      	beq.n	8003078 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d114      	bne.n	8003078 <I2C_SlaveReceive_RXNE+0x74>
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b2a      	cmp	r3, #42	; 0x2a
 8003052:	d111      	bne.n	8003078 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2222      	movs	r2, #34	; 0x22
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2228      	movs	r2, #40	; 0x28
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff f992 	bl	800239c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030de:	2b28      	cmp	r3, #40	; 0x28
 80030e0:	d127      	bne.n	8003132 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	81bb      	strh	r3, [r7, #12]
 8003114:	e002      	b.n	800311c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003124:	89ba      	ldrh	r2, [r7, #12]
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	4619      	mov	r1, r3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff f940 	bl	80023b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003130:	e00e      	b.n	8003150 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003176:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b4:	d172      	bne.n	800329c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b22      	cmp	r3, #34	; 0x22
 80031ba:	d002      	beq.n	80031c2 <I2C_Slave_STOPF+0x6a>
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b2a      	cmp	r3, #42	; 0x2a
 80031c0:	d135      	bne.n	800322e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0204 	orr.w	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd ff73 	bl	80010e6 <HAL_DMA_GetState>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d049      	beq.n	800329a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4a69      	ldr	r2, [pc, #420]	; (80033b0 <I2C_Slave_STOPF+0x258>)
 800320c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd ff45 	bl	80010a2 <HAL_DMA_Abort_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03d      	beq.n	800329a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003228:	4610      	mov	r0, r2
 800322a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800322c:	e035      	b.n	800329a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003260:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd ff3d 	bl	80010e6 <HAL_DMA_GetState>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	d014      	beq.n	800329c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	4a4e      	ldr	r2, [pc, #312]	; (80033b0 <I2C_Slave_STOPF+0x258>)
 8003278:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd ff0f 	bl	80010a2 <HAL_DMA_Abort_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003294:	4610      	mov	r0, r2
 8003296:	4798      	blx	r3
 8003298:	e000      	b.n	800329c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800329a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03e      	beq.n	8003324 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d112      	bne.n	80032da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d112      	bne.n	800330e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8b3 	bl	8003498 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003332:	e039      	b.n	80033a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b2a      	cmp	r3, #42	; 0x2a
 8003338:	d109      	bne.n	800334e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2228      	movs	r2, #40	; 0x28
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff f827 	bl	800239c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b28      	cmp	r3, #40	; 0x28
 8003358:	d111      	bne.n	800337e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <I2C_Slave_STOPF+0x25c>)
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff f828 	bl	80023cc <HAL_I2C_ListenCpltCallback>
}
 800337c:	e014      	b.n	80033a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	2b22      	cmp	r3, #34	; 0x22
 8003384:	d002      	beq.n	800338c <I2C_Slave_STOPF+0x234>
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b22      	cmp	r3, #34	; 0x22
 800338a:	d10d      	bne.n	80033a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fffa 	bl	800239c <HAL_I2C_SlaveRxCpltCallback>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	080039f9 	.word	0x080039f9
 80033b4:	ffff0000 	.word	0xffff0000

080033b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d002      	beq.n	80033da <I2C_Slave_AF+0x22>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d129      	bne.n	800342e <I2C_Slave_AF+0x76>
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b28      	cmp	r3, #40	; 0x28
 80033de:	d126      	bne.n	800342e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <I2C_Slave_AF+0xdc>)
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe ffd0 	bl	80023cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800342c:	e02e      	b.n	800348c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b21      	cmp	r3, #33	; 0x21
 8003432:	d126      	bne.n	8003482 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <I2C_Slave_AF+0xdc>)
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2221      	movs	r2, #33	; 0x21
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800345e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003468:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003478:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe ff84 	bl	8002388 <HAL_I2C_SlaveTxCpltCallback>
}
 8003480:	e004      	b.n	800348c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800348a:	615a      	str	r2, [r3, #20]
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	ffff0000 	.word	0xffff0000

08003498 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d002      	beq.n	80034bc <I2C_ITError+0x24>
 80034b6:	7bbb      	ldrb	r3, [r7, #14]
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d10a      	bne.n	80034d2 <I2C_ITError+0x3a>
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b22      	cmp	r3, #34	; 0x22
 80034c0:	d107      	bne.n	80034d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034d8:	2b28      	cmp	r3, #40	; 0x28
 80034da:	d107      	bne.n	80034ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2228      	movs	r2, #40	; 0x28
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034ea:	e015      	b.n	8003518 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fa:	d00a      	beq.n	8003512 <I2C_ITError+0x7a>
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b60      	cmp	r3, #96	; 0x60
 8003500:	d007      	beq.n	8003512 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003526:	d162      	bne.n	80035ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003536:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d020      	beq.n	8003588 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	4a6a      	ldr	r2, [pc, #424]	; (80036f4 <I2C_ITError+0x25c>)
 800354c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fda5 	bl	80010a2 <HAL_DMA_Abort_IT>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8089 	beq.w	8003672 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003582:	4610      	mov	r0, r2
 8003584:	4798      	blx	r3
 8003586:	e074      	b.n	8003672 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	4a59      	ldr	r2, [pc, #356]	; (80036f4 <I2C_ITError+0x25c>)
 800358e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fd84 	bl	80010a2 <HAL_DMA_Abort_IT>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d068      	beq.n	8003672 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d10b      	bne.n	80035c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e8:	4610      	mov	r0, r2
 80035ea:	4798      	blx	r3
 80035ec:	e041      	b.n	8003672 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b60      	cmp	r3, #96	; 0x60
 80035f8:	d125      	bne.n	8003646 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d10b      	bne.n	800362e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe feec 	bl	800241c <HAL_I2C_AbortCpltCallback>
 8003644:	e015      	b.n	8003672 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d10b      	bne.n	800366c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fe fecb 	bl	8002408 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10e      	bne.n	80036a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d113      	bne.n	80036ec <I2C_ITError+0x254>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b28      	cmp	r3, #40	; 0x28
 80036c8:	d110      	bne.n	80036ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <I2C_ITError+0x260>)
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fe70 	bl	80023cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	080039f9 	.word	0x080039f9
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4603      	mov	r3, r0
 800370c:	817b      	strh	r3, [r7, #10]
 800370e:	460b      	mov	r3, r1
 8003710:	813b      	strh	r3, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2200      	movs	r2, #0
 800372e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fa08 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374c:	d103      	bne.n	8003756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e05f      	b.n	800381a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	6a3a      	ldr	r2, [r7, #32]
 800376e:	492d      	ldr	r1, [pc, #180]	; (8003824 <I2C_RequestMemoryWrite+0x128>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fa40 	bl	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e04c      	b.n	800381a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	6a39      	ldr	r1, [r7, #32]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 faaa 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d107      	bne.n	80037be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e02b      	b.n	800381a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c8:	893b      	ldrh	r3, [r7, #8]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	611a      	str	r2, [r3, #16]
 80037d2:	e021      	b.n	8003818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037d4:	893b      	ldrh	r3, [r7, #8]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	6a39      	ldr	r1, [r7, #32]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa84 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d107      	bne.n	800380a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e005      	b.n	800381a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800380e:	893b      	ldrh	r3, [r7, #8]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	00010002 	.word	0x00010002

08003828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	461a      	mov	r2, r3
 8003836:	4603      	mov	r3, r0
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	460b      	mov	r3, r1
 800383c:	813b      	strh	r3, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	2200      	movs	r2, #0
 800386a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f96a 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d103      	bne.n	8003892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0aa      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	4952      	ldr	r1, [pc, #328]	; (80039f4 <I2C_RequestMemoryRead+0x1cc>)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f9a2 	bl	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e097      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa0c 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e076      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003904:	893b      	ldrh	r3, [r7, #8]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	e021      	b.n	8003954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	b29b      	uxth	r3, r3
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	6a39      	ldr	r1, [r7, #32]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f9e6 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b04      	cmp	r3, #4
 8003934:	d107      	bne.n	8003946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e050      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800394a:	893b      	ldrh	r3, [r7, #8]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	6a39      	ldr	r1, [r7, #32]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f9cb 	bl	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2b04      	cmp	r3, #4
 800396a:	d107      	bne.n	800397c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e035      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	2200      	movs	r2, #0
 8003998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f8d3 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d103      	bne.n	80039c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e013      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039c4:	897b      	ldrh	r3, [r7, #10]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	6a3a      	ldr	r2, [r7, #32]
 80039d8:	4906      	ldr	r1, [pc, #24]	; (80039f4 <I2C_RequestMemoryRead+0x1cc>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f90b 	bl	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	00010002 	.word	0x00010002

080039f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a12:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <I2C_DMAAbort+0x148>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <I2C_DMAAbort+0x14c>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0a1a      	lsrs	r2, r3, #8
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	00da      	lsls	r2, r3, #3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a3e:	e00a      	b.n	8003a56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a54:	d0ea      	beq.n	8003a2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	2200      	movs	r2, #0
 8003a64:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	2200      	movs	r2, #0
 8003a74:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	2200      	movs	r2, #0
 8003a9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b60      	cmp	r3, #96	; 0x60
 8003ac6:	d10e      	bne.n	8003ae6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2200      	movs	r2, #0
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ade:	6978      	ldr	r0, [r7, #20]
 8003ae0:	f7fe fc9c 	bl	800241c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ae4:	e027      	b.n	8003b36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aec:	2b28      	cmp	r3, #40	; 0x28
 8003aee:	d117      	bne.n	8003b20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2228      	movs	r2, #40	; 0x28
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b1e:	e007      	b.n	8003b30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b30:	6978      	ldr	r0, [r7, #20]
 8003b32:	f7fe fc69 	bl	8002408 <HAL_I2C_ErrorCallback>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000002c 	.word	0x2000002c
 8003b44:	14f8b589 	.word	0x14f8b589

08003b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b58:	e025      	b.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d021      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fd f8ed 	bl	8000d40 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d116      	bne.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e023      	b.n	8003bee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d10d      	bne.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	e00c      	b.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d0b6      	beq.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c04:	e051      	b.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c14:	d123      	bne.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0204 	orr.w	r2, r3, #4
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e046      	b.n	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d021      	beq.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fd f86b 	bl	8000d40 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d116      	bne.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e020      	b.n	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10c      	bne.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e00b      	b.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d18d      	bne.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d00:	e02d      	b.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f900 	bl	8003f08 <I2C_IsAcknowledgeFailed>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e02d      	b.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d021      	beq.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fd f811 	bl	8000d40 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e007      	b.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d1ca      	bne.n	8003d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d82:	e02d      	b.n	8003de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f8bf 	bl	8003f08 <I2C_IsAcknowledgeFailed>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e02d      	b.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d021      	beq.n	8003de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fc ffd0 	bl	8000d40 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d116      	bne.n	8003de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e007      	b.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d1ca      	bne.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e04:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	0a1a      	lsrs	r2, r3, #8
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e008      	b.n	8003e48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d0e9      	beq.n	8003e1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	2000002c 	.word	0x2000002c
 8003e58:	14f8b589 	.word	0x14f8b589

08003e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e68:	e042      	b.n	8003ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d119      	bne.n	8003eac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0210 	mvn.w	r2, #16
 8003e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e029      	b.n	8003f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fc ff48 	bl	8000d40 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d1b5      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d11b      	bne.n	8003f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f043 0204 	orr.w	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f76:	d103      	bne.n	8003f80 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f7e:	e007      	b.n	8003f90 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f88:	d102      	bne.n	8003f90 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e267      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d075      	beq.n	80040a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fba:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d00c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc6:	4b85      	ldr	r3, [pc, #532]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d112      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd2:	4b82      	ldr	r3, [pc, #520]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	4b7e      	ldr	r3, [pc, #504]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05b      	beq.n	80040a4 <HAL_RCC_OscConfig+0x108>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d157      	bne.n	80040a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e242      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004000:	d106      	bne.n	8004010 <HAL_RCC_OscConfig+0x74>
 8004002:	4b76      	ldr	r3, [pc, #472]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a75      	ldr	r2, [pc, #468]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e01d      	b.n	800404c <HAL_RCC_OscConfig+0xb0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x98>
 800401a:	4b70      	ldr	r3, [pc, #448]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6f      	ldr	r2, [pc, #444]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b6d      	ldr	r3, [pc, #436]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6c      	ldr	r2, [pc, #432]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0xb0>
 8004034:	4b69      	ldr	r3, [pc, #420]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a68      	ldr	r2, [pc, #416]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 800403a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b66      	ldr	r3, [pc, #408]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a65      	ldr	r2, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d013      	beq.n	800407c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fc fe74 	bl	8000d40 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405c:	f7fc fe70 	bl	8000d40 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e207      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b5b      	ldr	r3, [pc, #364]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0xc0>
 800407a:	e014      	b.n	80040a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fc fe60 	bl	8000d40 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004084:	f7fc fe5c 	bl	8000d40 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e1f3      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	4b51      	ldr	r3, [pc, #324]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0xe8>
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d063      	beq.n	800417a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040b2:	4b4a      	ldr	r3, [pc, #296]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d11c      	bne.n	8004104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ca:	4b44      	ldr	r3, [pc, #272]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d116      	bne.n	8004104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_RCC_OscConfig+0x152>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e1c7      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4937      	ldr	r1, [pc, #220]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	e03a      	b.n	800417a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800410c:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fc fe15 	bl	8000d40 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411a:	f7fc fe11 	bl	8000d40 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1a8      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b28      	ldr	r3, [pc, #160]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4925      	ldr	r1, [pc, #148]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]
 800414c:	e015      	b.n	800417a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fc fdf4 	bl	8000d40 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800415c:	f7fc fdf0 	bl	8000d40 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e187      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d036      	beq.n	80041f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_RCC_OscConfig+0x248>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fc fdd4 	bl	8000d40 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419c:	f7fc fdd0 	bl	8000d40 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e167      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_OscConfig+0x240>)
 80041b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x200>
 80041ba:	e01b      	b.n	80041f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_OscConfig+0x248>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c2:	f7fc fdbd 	bl	8000d40 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	e00e      	b.n	80041e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fc fdb9 	bl	8000d40 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d907      	bls.n	80041e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e150      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	42470000 	.word	0x42470000
 80041e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ea      	bne.n	80041ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8097 	beq.w	8004330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004206:	4b81      	ldr	r3, [pc, #516]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	4b7d      	ldr	r3, [pc, #500]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a7c      	ldr	r2, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x470>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b7a      	ldr	r3, [pc, #488]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b77      	ldr	r3, [pc, #476]	; (8004410 <HAL_RCC_OscConfig+0x474>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d118      	bne.n	8004270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423e:	4b74      	ldr	r3, [pc, #464]	; (8004410 <HAL_RCC_OscConfig+0x474>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a73      	ldr	r2, [pc, #460]	; (8004410 <HAL_RCC_OscConfig+0x474>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fc fd79 	bl	8000d40 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fc fd75 	bl	8000d40 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e10c      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x474>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <HAL_RCC_OscConfig+0x2ea>
 8004278:	4b64      	ldr	r3, [pc, #400]	; (800440c <HAL_RCC_OscConfig+0x470>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a63      	ldr	r2, [pc, #396]	; (800440c <HAL_RCC_OscConfig+0x470>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	e01c      	b.n	80042c0 <HAL_RCC_OscConfig+0x324>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b05      	cmp	r3, #5
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x30c>
 800428e:	4b5f      	ldr	r3, [pc, #380]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	4a5e      	ldr	r2, [pc, #376]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	6713      	str	r3, [r2, #112]	; 0x70
 800429a:	4b5c      	ldr	r3, [pc, #368]	; (800440c <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a5b      	ldr	r2, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
 80042a6:	e00b      	b.n	80042c0 <HAL_RCC_OscConfig+0x324>
 80042a8:	4b58      	ldr	r3, [pc, #352]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a57      	ldr	r2, [pc, #348]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	4b55      	ldr	r3, [pc, #340]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a54      	ldr	r2, [pc, #336]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80042ba:	f023 0304 	bic.w	r3, r3, #4
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fc fd3a 	bl	8000d40 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fc fd36 	bl	8000d40 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e0cb      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e6:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0ee      	beq.n	80042d0 <HAL_RCC_OscConfig+0x334>
 80042f2:	e014      	b.n	800431e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f4:	f7fc fd24 	bl	8000d40 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fc fd20 	bl	8000d40 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0b5      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004312:	4b3e      	ldr	r3, [pc, #248]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1ee      	bne.n	80042fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d105      	bne.n	8004330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004324:	4b39      	ldr	r3, [pc, #228]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	4a38      	ldr	r2, [pc, #224]	; (800440c <HAL_RCC_OscConfig+0x470>)
 800432a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80a1 	beq.w	800447c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800433a:	4b34      	ldr	r3, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x470>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b08      	cmp	r3, #8
 8004344:	d05c      	beq.n	8004400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d141      	bne.n	80043d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x478>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fc fcf4 	bl	8000d40 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435c:	f7fc fcf0 	bl	8000d40 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e087      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x470>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	3b01      	subs	r3, #1
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	491b      	ldr	r1, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x478>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fc fcc9 	bl	8000d40 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fc fcc5 	bl	8000d40 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e05c      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x416>
 80043d0:	e054      	b.n	800447c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x478>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fc fcb2 	bl	8000d40 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fc fcae 	bl	8000d40 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e045      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x470>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x444>
 80043fe:	e03d      	b.n	800447c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e038      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
 800440c:	40023800 	.word	0x40023800
 8004410:	40007000 	.word	0x40007000
 8004414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x4ec>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d028      	beq.n	8004478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d121      	bne.n	8004478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800444e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004450:	4293      	cmp	r3, r2
 8004452:	d111      	bne.n	8004478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800

0800448c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0cc      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a0:	4b68      	ldr	r3, [pc, #416]	; (8004644 <HAL_RCC_ClockConfig+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d90c      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b65      	ldr	r3, [pc, #404]	; (8004644 <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b63      	ldr	r3, [pc, #396]	; (8004644 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0b8      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b59      	ldr	r3, [pc, #356]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f8:	4b53      	ldr	r3, [pc, #332]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b50      	ldr	r3, [pc, #320]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	494d      	ldr	r1, [pc, #308]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d044      	beq.n	80045ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	4b47      	ldr	r3, [pc, #284]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d119      	bne.n	800456a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07f      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d003      	beq.n	800454a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004546:	2b03      	cmp	r3, #3
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454a:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e06f      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455a:	4b3b      	ldr	r3, [pc, #236]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e067      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 0203 	bic.w	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4934      	ldr	r1, [pc, #208]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	4313      	orrs	r3, r2
 800457a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800457c:	f7fc fbe0 	bl	8000d40 <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	e00a      	b.n	800459a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004584:	f7fc fbdc 	bl	8000d40 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e04f      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 020c 	and.w	r2, r3, #12
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1eb      	bne.n	8004584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <HAL_RCC_ClockConfig+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d20c      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_RCC_ClockConfig+0x1b8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e032      	b.n	800463a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4916      	ldr	r1, [pc, #88]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	490e      	ldr	r1, [pc, #56]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004612:	f000 f821 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004616:	4602      	mov	r2, r0
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	490a      	ldr	r1, [pc, #40]	; (800464c <HAL_RCC_ClockConfig+0x1c0>)
 8004624:	5ccb      	ldrb	r3, [r1, r3]
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_RCC_ClockConfig+0x1c8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fb40 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023c00 	.word	0x40023c00
 8004648:	40023800 	.word	0x40023800
 800464c:	08006250 	.word	0x08006250
 8004650:	2000002c 	.word	0x2000002c
 8004654:	20000030 	.word	0x20000030

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b090      	sub	sp, #64	; 0x40
 800465e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
 8004664:	2300      	movs	r3, #0
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004668:	2300      	movs	r3, #0
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004670:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b08      	cmp	r3, #8
 800467a:	d00d      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x40>
 800467c:	2b08      	cmp	r3, #8
 800467e:	f200 80a1 	bhi.w	80047c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x34>
 8004686:	2b04      	cmp	r3, #4
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x3a>
 800468a:	e09b      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800468c:	4b53      	ldr	r3, [pc, #332]	; (80047dc <HAL_RCC_GetSysClockFreq+0x184>)
 800468e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004690:	e09b      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004692:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004696:	e098      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004698:	4b4f      	ldr	r3, [pc, #316]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046a2:	4b4d      	ldr	r3, [pc, #308]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d028      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	2200      	movs	r2, #0
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	627a      	str	r2, [r7, #36]	; 0x24
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046c0:	2100      	movs	r1, #0
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c4:	fb03 f201 	mul.w	r2, r3, r1
 80046c8:	2300      	movs	r3, #0
 80046ca:	fb00 f303 	mul.w	r3, r0, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	4a43      	ldr	r2, [pc, #268]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046d2:	fba0 1202 	umull	r1, r2, r0, r2
 80046d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d8:	460a      	mov	r2, r1
 80046da:	62ba      	str	r2, [r7, #40]	; 0x28
 80046dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046de:	4413      	add	r3, r2
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e4:	2200      	movs	r2, #0
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	61fa      	str	r2, [r7, #28]
 80046ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046f2:	f7fb fdc5 	bl	8000280 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4613      	mov	r3, r2
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fe:	e053      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	099b      	lsrs	r3, r3, #6
 8004706:	2200      	movs	r2, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	617a      	str	r2, [r7, #20]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004712:	f04f 0b00 	mov.w	fp, #0
 8004716:	4652      	mov	r2, sl
 8004718:	465b      	mov	r3, fp
 800471a:	f04f 0000 	mov.w	r0, #0
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	0159      	lsls	r1, r3, #5
 8004724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004728:	0150      	lsls	r0, r2, #5
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	ebb2 080a 	subs.w	r8, r2, sl
 8004732:	eb63 090b 	sbc.w	r9, r3, fp
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004742:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004746:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800474a:	ebb2 0408 	subs.w	r4, r2, r8
 800474e:	eb63 0509 	sbc.w	r5, r3, r9
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	00eb      	lsls	r3, r5, #3
 800475c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004760:	00e2      	lsls	r2, r4, #3
 8004762:	4614      	mov	r4, r2
 8004764:	461d      	mov	r5, r3
 8004766:	eb14 030a 	adds.w	r3, r4, sl
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	eb45 030b 	adc.w	r3, r5, fp
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800477e:	4629      	mov	r1, r5
 8004780:	028b      	lsls	r3, r1, #10
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004788:	4621      	mov	r1, r4
 800478a:	028a      	lsls	r2, r1, #10
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	2200      	movs	r2, #0
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	60fa      	str	r2, [r7, #12]
 8004798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800479c:	f7fb fd70 	bl	8000280 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4613      	mov	r3, r2
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	3301      	adds	r3, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047c2:	e002      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetSysClockFreq+0x184>)
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3740      	adds	r7, #64	; 0x40
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800
 80047dc:	00f42400 	.word	0x00f42400
 80047e0:	017d7840 	.word	0x017d7840

080047e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	2000002c 	.word	0x2000002c

080047fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004800:	f7ff fff0 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004804:	4602      	mov	r2, r0
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	0a9b      	lsrs	r3, r3, #10
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	4903      	ldr	r1, [pc, #12]	; (8004820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004812:	5ccb      	ldrb	r3, [r1, r3]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	08006260 	.word	0x08006260

08004824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004828:	f7ff ffdc 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0b5b      	lsrs	r3, r3, #13
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	; (8004848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	08006260 	.word	0x08006260

0800484c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e03f      	b.n	80048de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc f8f4 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	; 0x24
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fd7b 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08a      	sub	sp, #40	; 0x28
 80048ea:	af02      	add	r7, sp, #8
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	d17c      	bne.n	8004a00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_Transmit+0x2c>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e075      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit+0x3e>
 8004920:	2302      	movs	r3, #2
 8004922:	e06e      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2221      	movs	r2, #33	; 0x21
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493a:	f7fc fa01 	bl	8000d40 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004954:	d108      	bne.n	8004968 <HAL_UART_Transmit+0x82>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	e003      	b.n	8004970 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004978:	e02a      	b.n	80049d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 faf9 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e036      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3302      	adds	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e007      	b.n	80049c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1cf      	bne.n	800497a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fac9 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e006      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e000      	b.n	8004a02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b0ba      	sub	sp, #232	; 0xe8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_UART_IRQHandler+0x66>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fbd3 	bl	8005216 <UART_Receive_IT>
      return;
 8004a70:	e256      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80de 	beq.w	8004c38 <HAL_UART_IRQHandler+0x22c>
 8004a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80d1 	beq.w	8004c38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_UART_IRQHandler+0xae>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_UART_IRQHandler+0xd2>
 8004ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0202 	orr.w	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_UART_IRQHandler+0xf6>
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0204 	orr.w	r2, r3, #4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d011      	beq.n	8004b32 <HAL_UART_IRQHandler+0x126>
 8004b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0208 	orr.w	r2, r3, #8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 81ed 	beq.w	8004f16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_UART_IRQHandler+0x14e>
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fb5e 	bl	8005216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <HAL_UART_IRQHandler+0x17a>
 8004b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04f      	beq.n	8004c26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fa66 	bl	8005058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d141      	bne.n	8004c1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1d9      	bne.n	8004b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d013      	beq.n	8004c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	4a7d      	ldr	r2, [pc, #500]	; (8004de8 <HAL_UART_IRQHandler+0x3dc>)
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc fa51 	bl	80010a2 <HAL_DMA_Abort_IT>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c10:	4610      	mov	r0, r2
 8004c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e00e      	b.n	8004c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f99a 	bl	8004f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e00a      	b.n	8004c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f996 	bl	8004f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e006      	b.n	8004c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f992 	bl	8004f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c32:	e170      	b.n	8004f16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	bf00      	nop
    return;
 8004c36:	e16e      	b.n	8004f16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 814a 	bne.w	8004ed6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8143 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 813c 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	f040 80b4 	bne.w	8004dec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8140 	beq.w	8004f1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	f080 8139 	bcs.w	8004f1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cba:	f000 8088 	beq.w	8004dce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d9      	bne.n	8004cbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e1      	bne.n	8004d0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	f023 0310 	bic.w	r3, r3, #16
 8004da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004db0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004db2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e3      	bne.n	8004d8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fc f8fa 	bl	8000fc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8c0 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004de4:	e099      	b.n	8004f1a <HAL_UART_IRQHandler+0x50e>
 8004de6:	bf00      	nop
 8004de8:	0800511f 	.word	0x0800511f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 808b 	beq.w	8004f1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8086 	beq.w	8004f1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e36:	647a      	str	r2, [r7, #68]	; 0x44
 8004e38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e3      	bne.n	8004e12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e3      	bne.n	8004e4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0310 	bic.w	r3, r3, #16
 8004ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004eb4:	61fa      	str	r2, [r7, #28]
 8004eb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e3      	bne.n	8004e90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f848 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ed4:	e023      	b.n	8004f1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x4ea>
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f929 	bl	8005146 <UART_Transmit_IT>
    return;
 8004ef4:	e014      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00e      	beq.n	8004f20 <HAL_UART_IRQHandler+0x514>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f969 	bl	80051e6 <UART_EndTransmit_IT>
    return;
 8004f14:	e004      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
    return;
 8004f16:	bf00      	nop
 8004f18:	e002      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
      return;
 8004f1a:	bf00      	nop
 8004f1c:	e000      	b.n	8004f20 <HAL_UART_IRQHandler+0x514>
      return;
 8004f1e:	bf00      	nop
  }
}
 8004f20:	37e8      	adds	r7, #232	; 0xe8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop

08004f28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b090      	sub	sp, #64	; 0x40
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	e050      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d04c      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <UART_WaitOnFlagUntilTimeout+0x30>
 8004f9c:	f7fb fed0 	bl	8000d40 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d241      	bcs.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fcc:	637a      	str	r2, [r7, #52]	; 0x34
 8004fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e5      	bne.n	8004fac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005000:	623a      	str	r2, [r7, #32]
 8005002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	61bb      	str	r3, [r7, #24]
   return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e00f      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	429a      	cmp	r2, r3
 800504c:	d09f      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3740      	adds	r7, #64	; 0x40
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b095      	sub	sp, #84	; 0x54
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005080:	643a      	str	r2, [r7, #64]	; 0x40
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d119      	bne.n	8005104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f0:	61ba      	str	r2, [r7, #24]
 80050f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	613b      	str	r3, [r7, #16]
   return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005112:	bf00      	nop
 8005114:	3754      	adds	r7, #84	; 0x54
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff ff09 	bl	8004f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b21      	cmp	r3, #33	; 0x21
 8005158:	d13e      	bne.n	80051d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d114      	bne.n	800518e <UART_Transmit_IT+0x48>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d110      	bne.n	800518e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]
 800518c:	e008      	b.n	80051a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6211      	str	r1, [r2, #32]
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4619      	mov	r1, r3
 80051ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fe8e 	bl	8004f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08c      	sub	sp, #48	; 0x30
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b22      	cmp	r3, #34	; 0x22
 8005228:	f040 80ab 	bne.w	8005382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d117      	bne.n	8005266 <UART_Receive_IT+0x50>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d113      	bne.n	8005266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005254:	b29a      	uxth	r2, r3
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
 8005264:	e026      	b.n	80052b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d007      	beq.n	800528a <UART_Receive_IT+0x74>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <UART_Receive_IT+0x82>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e008      	b.n	80052aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29b      	uxth	r3, r3
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4619      	mov	r1, r3
 80052c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d15a      	bne.n	800537e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0220 	bic.w	r2, r2, #32
 80052d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d135      	bne.n	8005374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	623a      	str	r2, [r7, #32]
 8005330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	61bb      	str	r3, [r7, #24]
   return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d10a      	bne.n	8005366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fdf9 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
 8005372:	e002      	b.n	800537a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fde1 	bl	8004f3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e002      	b.n	8005384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	; 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005390:	b0c0      	sub	sp, #256	; 0x100
 8005392:	af00      	add	r7, sp, #0
 8005394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	68d9      	ldr	r1, [r3, #12]
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	ea40 0301 	orr.w	r3, r0, r1
 80053b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053e4:	f021 010c 	bic.w	r1, r1, #12
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053f2:	430b      	orrs	r3, r1
 80053f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	6999      	ldr	r1, [r3, #24]
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	ea40 0301 	orr.w	r3, r0, r1
 8005412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b8f      	ldr	r3, [pc, #572]	; (8005658 <UART_SetConfig+0x2cc>)
 800541c:	429a      	cmp	r2, r3
 800541e:	d005      	beq.n	800542c <UART_SetConfig+0xa0>
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8d      	ldr	r3, [pc, #564]	; (800565c <UART_SetConfig+0x2d0>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d104      	bne.n	8005436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800542c:	f7ff f9fa 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 8005430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005434:	e003      	b.n	800543e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005436:	f7ff f9e1 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 800543a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005448:	f040 810c 	bne.w	8005664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005450:	2200      	movs	r2, #0
 8005452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800545a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800545e:	4622      	mov	r2, r4
 8005460:	462b      	mov	r3, r5
 8005462:	1891      	adds	r1, r2, r2
 8005464:	65b9      	str	r1, [r7, #88]	; 0x58
 8005466:	415b      	adcs	r3, r3
 8005468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800546e:	4621      	mov	r1, r4
 8005470:	eb12 0801 	adds.w	r8, r2, r1
 8005474:	4629      	mov	r1, r5
 8005476:	eb43 0901 	adc.w	r9, r3, r1
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548e:	4690      	mov	r8, r2
 8005490:	4699      	mov	r9, r3
 8005492:	4623      	mov	r3, r4
 8005494:	eb18 0303 	adds.w	r3, r8, r3
 8005498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800549c:	462b      	mov	r3, r5
 800549e:	eb49 0303 	adc.w	r3, r9, r3
 80054a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054ba:	460b      	mov	r3, r1
 80054bc:	18db      	adds	r3, r3, r3
 80054be:	653b      	str	r3, [r7, #80]	; 0x50
 80054c0:	4613      	mov	r3, r2
 80054c2:	eb42 0303 	adc.w	r3, r2, r3
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
 80054c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054d0:	f7fa fed6 	bl	8000280 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b61      	ldr	r3, [pc, #388]	; (8005660 <UART_SetConfig+0x2d4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011c      	lsls	r4, r3, #4
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80054fc:	415b      	adcs	r3, r3
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005504:	4641      	mov	r1, r8
 8005506:	eb12 0a01 	adds.w	sl, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb43 0b01 	adc.w	fp, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800551c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005524:	4692      	mov	sl, r2
 8005526:	469b      	mov	fp, r3
 8005528:	4643      	mov	r3, r8
 800552a:	eb1a 0303 	adds.w	r3, sl, r3
 800552e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005532:	464b      	mov	r3, r9
 8005534:	eb4b 0303 	adc.w	r3, fp, r3
 8005538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800554c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005550:	460b      	mov	r3, r1
 8005552:	18db      	adds	r3, r3, r3
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
 8005556:	4613      	mov	r3, r2
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
 800555e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005566:	f7fa fe8b 	bl	8000280 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4611      	mov	r1, r2
 8005570:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <UART_SetConfig+0x2d4>)
 8005572:	fba3 2301 	umull	r2, r3, r3, r1
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2264      	movs	r2, #100	; 0x64
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	1acb      	subs	r3, r1, r3
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <UART_SetConfig+0x2d4>)
 8005588:	fba3 2302 	umull	r2, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005594:	441c      	add	r4, r3
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80055b0:	415b      	adcs	r3, r3
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6339      	str	r1, [r7, #48]	; 0x30
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ec:	464b      	mov	r3, r9
 80055ee:	460a      	mov	r2, r1
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800560c:	460b      	mov	r3, r1
 800560e:	18db      	adds	r3, r3, r3
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	4613      	mov	r3, r2
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800561e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005622:	f7fa fe2d 	bl	8000280 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <UART_SetConfig+0x2d4>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	; 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	3332      	adds	r3, #50	; 0x32
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <UART_SetConfig+0x2d4>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f003 0207 	and.w	r2, r3, #7
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4422      	add	r2, r4
 8005652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005654:	e105      	b.n	8005862 <UART_SetConfig+0x4d6>
 8005656:	bf00      	nop
 8005658:	40011000 	.word	0x40011000
 800565c:	40011400 	.word	0x40011400
 8005660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800566e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005676:	4642      	mov	r2, r8
 8005678:	464b      	mov	r3, r9
 800567a:	1891      	adds	r1, r2, r2
 800567c:	6239      	str	r1, [r7, #32]
 800567e:	415b      	adcs	r3, r3
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005686:	4641      	mov	r1, r8
 8005688:	1854      	adds	r4, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0501 	adc.w	r5, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	00eb      	lsls	r3, r5, #3
 800569a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569e:	00e2      	lsls	r2, r4, #3
 80056a0:	4614      	mov	r4, r2
 80056a2:	461d      	mov	r5, r3
 80056a4:	4643      	mov	r3, r8
 80056a6:	18e3      	adds	r3, r4, r3
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ac:	464b      	mov	r3, r9
 80056ae:	eb45 0303 	adc.w	r3, r5, r3
 80056b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056d2:	4629      	mov	r1, r5
 80056d4:	008b      	lsls	r3, r1, #2
 80056d6:	4621      	mov	r1, r4
 80056d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056dc:	4621      	mov	r1, r4
 80056de:	008a      	lsls	r2, r1, #2
 80056e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056e4:	f7fa fdcc 	bl	8000280 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <UART_SetConfig+0x4e4>)
 80056ee:	fba3 2302 	umull	r2, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	011c      	lsls	r4, r3, #4
 80056f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	1891      	adds	r1, r2, r2
 800570e:	61b9      	str	r1, [r7, #24]
 8005710:	415b      	adcs	r3, r3
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005718:	4641      	mov	r1, r8
 800571a:	1851      	adds	r1, r2, r1
 800571c:	6139      	str	r1, [r7, #16]
 800571e:	4649      	mov	r1, r9
 8005720:	414b      	adcs	r3, r1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005730:	4659      	mov	r1, fp
 8005732:	00cb      	lsls	r3, r1, #3
 8005734:	4651      	mov	r1, sl
 8005736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573a:	4651      	mov	r1, sl
 800573c:	00ca      	lsls	r2, r1, #3
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	4603      	mov	r3, r0
 8005744:	4642      	mov	r2, r8
 8005746:	189b      	adds	r3, r3, r2
 8005748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800574c:	464b      	mov	r3, r9
 800574e:	460a      	mov	r2, r1
 8005750:	eb42 0303 	adc.w	r3, r2, r3
 8005754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	67bb      	str	r3, [r7, #120]	; 0x78
 8005762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005770:	4649      	mov	r1, r9
 8005772:	008b      	lsls	r3, r1, #2
 8005774:	4641      	mov	r1, r8
 8005776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577a:	4641      	mov	r1, r8
 800577c:	008a      	lsls	r2, r1, #2
 800577e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005782:	f7fa fd7d 	bl	8000280 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <UART_SetConfig+0x4e4>)
 800578c:	fba3 1302 	umull	r1, r3, r3, r2
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	2164      	movs	r1, #100	; 0x64
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	3332      	adds	r3, #50	; 0x32
 800579e:	4a34      	ldr	r2, [pc, #208]	; (8005870 <UART_SetConfig+0x4e4>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057aa:	441c      	add	r4, r3
 80057ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b0:	2200      	movs	r2, #0
 80057b2:	673b      	str	r3, [r7, #112]	; 0x70
 80057b4:	677a      	str	r2, [r7, #116]	; 0x74
 80057b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057ba:	4642      	mov	r2, r8
 80057bc:	464b      	mov	r3, r9
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	415b      	adcs	r3, r3
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ca:	4641      	mov	r1, r8
 80057cc:	1851      	adds	r1, r2, r1
 80057ce:	6039      	str	r1, [r7, #0]
 80057d0:	4649      	mov	r1, r9
 80057d2:	414b      	adcs	r3, r1
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057e2:	4659      	mov	r1, fp
 80057e4:	00cb      	lsls	r3, r1, #3
 80057e6:	4651      	mov	r1, sl
 80057e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ec:	4651      	mov	r1, sl
 80057ee:	00ca      	lsls	r2, r1, #3
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	4603      	mov	r3, r0
 80057f6:	4642      	mov	r2, r8
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	464b      	mov	r3, r9
 80057fe:	460a      	mov	r2, r1
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	663b      	str	r3, [r7, #96]	; 0x60
 8005810:	667a      	str	r2, [r7, #100]	; 0x64
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800581e:	4649      	mov	r1, r9
 8005820:	008b      	lsls	r3, r1, #2
 8005822:	4641      	mov	r1, r8
 8005824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005828:	4641      	mov	r1, r8
 800582a:	008a      	lsls	r2, r1, #2
 800582c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005830:	f7fa fd26 	bl	8000280 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <UART_SetConfig+0x4e4>)
 800583a:	fba3 1302 	umull	r1, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	; 0x32
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <UART_SetConfig+0x4e4>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4422      	add	r2, r4
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	bf00      	nop
 8005864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586e:	bf00      	nop
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000038 	.word	0x20000038

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4d0d      	ldr	r5, [pc, #52]	; (80058b8 <__libc_init_array+0x38>)
 8005884:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	2600      	movs	r6, #0
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	4d0b      	ldr	r5, [pc, #44]	; (80058c0 <__libc_init_array+0x40>)
 8005892:	4c0c      	ldr	r4, [pc, #48]	; (80058c4 <__libc_init_array+0x44>)
 8005894:	f000 fc9e 	bl	80061d4 <_init>
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	2600      	movs	r6, #0
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	080062a4 	.word	0x080062a4
 80058bc:	080062a4 	.word	0x080062a4
 80058c0:	080062a4 	.word	0x080062a4
 80058c4:	080062a8 	.word	0x080062a8

080058c8 <memcmp>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	3901      	subs	r1, #1
 80058cc:	4402      	add	r2, r0
 80058ce:	4290      	cmp	r0, r2
 80058d0:	d101      	bne.n	80058d6 <memcmp+0xe>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e005      	b.n	80058e2 <memcmp+0x1a>
 80058d6:	7803      	ldrb	r3, [r0, #0]
 80058d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d001      	beq.n	80058e4 <memcmp+0x1c>
 80058e0:	1b18      	subs	r0, r3, r4
 80058e2:	bd10      	pop	{r4, pc}
 80058e4:	3001      	adds	r0, #1
 80058e6:	e7f2      	b.n	80058ce <memcmp+0x6>

080058e8 <memset>:
 80058e8:	4402      	add	r2, r0
 80058ea:	4603      	mov	r3, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d100      	bne.n	80058f2 <memset+0xa>
 80058f0:	4770      	bx	lr
 80058f2:	f803 1b01 	strb.w	r1, [r3], #1
 80058f6:	e7f9      	b.n	80058ec <memset+0x4>

080058f8 <siprintf>:
 80058f8:	b40e      	push	{r1, r2, r3}
 80058fa:	b500      	push	{lr}
 80058fc:	b09c      	sub	sp, #112	; 0x70
 80058fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	9006      	str	r0, [sp, #24]
 8005904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005908:	4809      	ldr	r0, [pc, #36]	; (8005930 <siprintf+0x38>)
 800590a:	9107      	str	r1, [sp, #28]
 800590c:	9104      	str	r1, [sp, #16]
 800590e:	4909      	ldr	r1, [pc, #36]	; (8005934 <siprintf+0x3c>)
 8005910:	f853 2b04 	ldr.w	r2, [r3], #4
 8005914:	9105      	str	r1, [sp, #20]
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	a902      	add	r1, sp, #8
 800591c:	f000 f868 	bl	80059f0 <_svfiprintf_r>
 8005920:	9b02      	ldr	r3, [sp, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	b01c      	add	sp, #112	; 0x70
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	b003      	add	sp, #12
 800592e:	4770      	bx	lr
 8005930:	20000038 	.word	0x20000038
 8005934:	ffff0208 	.word	0xffff0208

08005938 <__ssputs_r>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	688e      	ldr	r6, [r1, #8]
 800593e:	429e      	cmp	r6, r3
 8005940:	4682      	mov	sl, r0
 8005942:	460c      	mov	r4, r1
 8005944:	4690      	mov	r8, r2
 8005946:	461f      	mov	r7, r3
 8005948:	d838      	bhi.n	80059bc <__ssputs_r+0x84>
 800594a:	898a      	ldrh	r2, [r1, #12]
 800594c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005950:	d032      	beq.n	80059b8 <__ssputs_r+0x80>
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	6909      	ldr	r1, [r1, #16]
 8005956:	eba5 0901 	sub.w	r9, r5, r1
 800595a:	6965      	ldr	r5, [r4, #20]
 800595c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005964:	3301      	adds	r3, #1
 8005966:	444b      	add	r3, r9
 8005968:	106d      	asrs	r5, r5, #1
 800596a:	429d      	cmp	r5, r3
 800596c:	bf38      	it	cc
 800596e:	461d      	movcc	r5, r3
 8005970:	0553      	lsls	r3, r2, #21
 8005972:	d531      	bpl.n	80059d8 <__ssputs_r+0xa0>
 8005974:	4629      	mov	r1, r5
 8005976:	f000 fb63 	bl	8006040 <_malloc_r>
 800597a:	4606      	mov	r6, r0
 800597c:	b950      	cbnz	r0, 8005994 <__ssputs_r+0x5c>
 800597e:	230c      	movs	r3, #12
 8005980:	f8ca 3000 	str.w	r3, [sl]
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598a:	81a3      	strh	r3, [r4, #12]
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005994:	6921      	ldr	r1, [r4, #16]
 8005996:	464a      	mov	r2, r9
 8005998:	f000 fabe 	bl	8005f18 <memcpy>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	6126      	str	r6, [r4, #16]
 80059aa:	6165      	str	r5, [r4, #20]
 80059ac:	444e      	add	r6, r9
 80059ae:	eba5 0509 	sub.w	r5, r5, r9
 80059b2:	6026      	str	r6, [r4, #0]
 80059b4:	60a5      	str	r5, [r4, #8]
 80059b6:	463e      	mov	r6, r7
 80059b8:	42be      	cmp	r6, r7
 80059ba:	d900      	bls.n	80059be <__ssputs_r+0x86>
 80059bc:	463e      	mov	r6, r7
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	4632      	mov	r2, r6
 80059c2:	4641      	mov	r1, r8
 80059c4:	f000 fab6 	bl	8005f34 <memmove>
 80059c8:	68a3      	ldr	r3, [r4, #8]
 80059ca:	1b9b      	subs	r3, r3, r6
 80059cc:	60a3      	str	r3, [r4, #8]
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	4433      	add	r3, r6
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	2000      	movs	r0, #0
 80059d6:	e7db      	b.n	8005990 <__ssputs_r+0x58>
 80059d8:	462a      	mov	r2, r5
 80059da:	f000 fba5 	bl	8006128 <_realloc_r>
 80059de:	4606      	mov	r6, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d1e1      	bne.n	80059a8 <__ssputs_r+0x70>
 80059e4:	6921      	ldr	r1, [r4, #16]
 80059e6:	4650      	mov	r0, sl
 80059e8:	f000 fabe 	bl	8005f68 <_free_r>
 80059ec:	e7c7      	b.n	800597e <__ssputs_r+0x46>
	...

080059f0 <_svfiprintf_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	4698      	mov	r8, r3
 80059f6:	898b      	ldrh	r3, [r1, #12]
 80059f8:	061b      	lsls	r3, r3, #24
 80059fa:	b09d      	sub	sp, #116	; 0x74
 80059fc:	4607      	mov	r7, r0
 80059fe:	460d      	mov	r5, r1
 8005a00:	4614      	mov	r4, r2
 8005a02:	d50e      	bpl.n	8005a22 <_svfiprintf_r+0x32>
 8005a04:	690b      	ldr	r3, [r1, #16]
 8005a06:	b963      	cbnz	r3, 8005a22 <_svfiprintf_r+0x32>
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	f000 fb19 	bl	8006040 <_malloc_r>
 8005a0e:	6028      	str	r0, [r5, #0]
 8005a10:	6128      	str	r0, [r5, #16]
 8005a12:	b920      	cbnz	r0, 8005a1e <_svfiprintf_r+0x2e>
 8005a14:	230c      	movs	r3, #12
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	e0d1      	b.n	8005bc2 <_svfiprintf_r+0x1d2>
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	616b      	str	r3, [r5, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9309      	str	r3, [sp, #36]	; 0x24
 8005a26:	2320      	movs	r3, #32
 8005a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a30:	2330      	movs	r3, #48	; 0x30
 8005a32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bdc <_svfiprintf_r+0x1ec>
 8005a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a3a:	f04f 0901 	mov.w	r9, #1
 8005a3e:	4623      	mov	r3, r4
 8005a40:	469a      	mov	sl, r3
 8005a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a46:	b10a      	cbz	r2, 8005a4c <_svfiprintf_r+0x5c>
 8005a48:	2a25      	cmp	r2, #37	; 0x25
 8005a4a:	d1f9      	bne.n	8005a40 <_svfiprintf_r+0x50>
 8005a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a50:	d00b      	beq.n	8005a6a <_svfiprintf_r+0x7a>
 8005a52:	465b      	mov	r3, fp
 8005a54:	4622      	mov	r2, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ff6d 	bl	8005938 <__ssputs_r>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f000 80aa 	beq.w	8005bb8 <_svfiprintf_r+0x1c8>
 8005a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a66:	445a      	add	r2, fp
 8005a68:	9209      	str	r2, [sp, #36]	; 0x24
 8005a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80a2 	beq.w	8005bb8 <_svfiprintf_r+0x1c8>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a7e:	f10a 0a01 	add.w	sl, sl, #1
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	9307      	str	r3, [sp, #28]
 8005a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a8c:	4654      	mov	r4, sl
 8005a8e:	2205      	movs	r2, #5
 8005a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a94:	4851      	ldr	r0, [pc, #324]	; (8005bdc <_svfiprintf_r+0x1ec>)
 8005a96:	f7fa fba3 	bl	80001e0 <memchr>
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	b9d8      	cbnz	r0, 8005ad6 <_svfiprintf_r+0xe6>
 8005a9e:	06d0      	lsls	r0, r2, #27
 8005aa0:	bf44      	itt	mi
 8005aa2:	2320      	movmi	r3, #32
 8005aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa8:	0711      	lsls	r1, r2, #28
 8005aaa:	bf44      	itt	mi
 8005aac:	232b      	movmi	r3, #43	; 0x2b
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d015      	beq.n	8005ae6 <_svfiprintf_r+0xf6>
 8005aba:	9a07      	ldr	r2, [sp, #28]
 8005abc:	4654      	mov	r4, sl
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f04f 0c0a 	mov.w	ip, #10
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aca:	3b30      	subs	r3, #48	; 0x30
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d94e      	bls.n	8005b6e <_svfiprintf_r+0x17e>
 8005ad0:	b1b0      	cbz	r0, 8005b00 <_svfiprintf_r+0x110>
 8005ad2:	9207      	str	r2, [sp, #28]
 8005ad4:	e014      	b.n	8005b00 <_svfiprintf_r+0x110>
 8005ad6:	eba0 0308 	sub.w	r3, r0, r8
 8005ada:	fa09 f303 	lsl.w	r3, r9, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	46a2      	mov	sl, r4
 8005ae4:	e7d2      	b.n	8005a8c <_svfiprintf_r+0x9c>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9103      	str	r1, [sp, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbb      	ittet	lt
 8005af2:	425b      	neglt	r3, r3
 8005af4:	f042 0202 	orrlt.w	r2, r2, #2
 8005af8:	9307      	strge	r3, [sp, #28]
 8005afa:	9307      	strlt	r3, [sp, #28]
 8005afc:	bfb8      	it	lt
 8005afe:	9204      	strlt	r2, [sp, #16]
 8005b00:	7823      	ldrb	r3, [r4, #0]
 8005b02:	2b2e      	cmp	r3, #46	; 0x2e
 8005b04:	d10c      	bne.n	8005b20 <_svfiprintf_r+0x130>
 8005b06:	7863      	ldrb	r3, [r4, #1]
 8005b08:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0a:	d135      	bne.n	8005b78 <_svfiprintf_r+0x188>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	1d1a      	adds	r2, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	9203      	str	r2, [sp, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bfb8      	it	lt
 8005b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b1c:	3402      	adds	r4, #2
 8005b1e:	9305      	str	r3, [sp, #20]
 8005b20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bec <_svfiprintf_r+0x1fc>
 8005b24:	7821      	ldrb	r1, [r4, #0]
 8005b26:	2203      	movs	r2, #3
 8005b28:	4650      	mov	r0, sl
 8005b2a:	f7fa fb59 	bl	80001e0 <memchr>
 8005b2e:	b140      	cbz	r0, 8005b42 <_svfiprintf_r+0x152>
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	eba0 000a 	sub.w	r0, r0, sl
 8005b36:	fa03 f000 	lsl.w	r0, r3, r0
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	4303      	orrs	r3, r0
 8005b3e:	3401      	adds	r4, #1
 8005b40:	9304      	str	r3, [sp, #16]
 8005b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b46:	4826      	ldr	r0, [pc, #152]	; (8005be0 <_svfiprintf_r+0x1f0>)
 8005b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b4c:	2206      	movs	r2, #6
 8005b4e:	f7fa fb47 	bl	80001e0 <memchr>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d038      	beq.n	8005bc8 <_svfiprintf_r+0x1d8>
 8005b56:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <_svfiprintf_r+0x1f4>)
 8005b58:	bb1b      	cbnz	r3, 8005ba2 <_svfiprintf_r+0x1b2>
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	3307      	adds	r3, #7
 8005b5e:	f023 0307 	bic.w	r3, r3, #7
 8005b62:	3308      	adds	r3, #8
 8005b64:	9303      	str	r3, [sp, #12]
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	4433      	add	r3, r6
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	e767      	b.n	8005a3e <_svfiprintf_r+0x4e>
 8005b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b72:	460c      	mov	r4, r1
 8005b74:	2001      	movs	r0, #1
 8005b76:	e7a5      	b.n	8005ac4 <_svfiprintf_r+0xd4>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	3401      	adds	r4, #1
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f04f 0c0a 	mov.w	ip, #10
 8005b84:	4620      	mov	r0, r4
 8005b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8a:	3a30      	subs	r2, #48	; 0x30
 8005b8c:	2a09      	cmp	r2, #9
 8005b8e:	d903      	bls.n	8005b98 <_svfiprintf_r+0x1a8>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0c5      	beq.n	8005b20 <_svfiprintf_r+0x130>
 8005b94:	9105      	str	r1, [sp, #20]
 8005b96:	e7c3      	b.n	8005b20 <_svfiprintf_r+0x130>
 8005b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e7f0      	b.n	8005b84 <_svfiprintf_r+0x194>
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <_svfiprintf_r+0x1f8>)
 8005baa:	a904      	add	r1, sp, #16
 8005bac:	4638      	mov	r0, r7
 8005bae:	f3af 8000 	nop.w
 8005bb2:	1c42      	adds	r2, r0, #1
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	d1d6      	bne.n	8005b66 <_svfiprintf_r+0x176>
 8005bb8:	89ab      	ldrh	r3, [r5, #12]
 8005bba:	065b      	lsls	r3, r3, #25
 8005bbc:	f53f af2c 	bmi.w	8005a18 <_svfiprintf_r+0x28>
 8005bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc2:	b01d      	add	sp, #116	; 0x74
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <_svfiprintf_r+0x1f8>)
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	f000 f87a 	bl	8005ccc <_printf_i>
 8005bd8:	e7eb      	b.n	8005bb2 <_svfiprintf_r+0x1c2>
 8005bda:	bf00      	nop
 8005bdc:	08006268 	.word	0x08006268
 8005be0:	08006272 	.word	0x08006272
 8005be4:	00000000 	.word	0x00000000
 8005be8:	08005939 	.word	0x08005939
 8005bec:	0800626e 	.word	0x0800626e

08005bf0 <_printf_common>:
 8005bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	688a      	ldr	r2, [r1, #8]
 8005bfa:	690b      	ldr	r3, [r1, #16]
 8005bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	bfb8      	it	lt
 8005c04:	4613      	movlt	r3, r2
 8005c06:	6033      	str	r3, [r6, #0]
 8005c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	b10a      	cbz	r2, 8005c16 <_printf_common+0x26>
 8005c12:	3301      	adds	r3, #1
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	0699      	lsls	r1, r3, #26
 8005c1a:	bf42      	ittt	mi
 8005c1c:	6833      	ldrmi	r3, [r6, #0]
 8005c1e:	3302      	addmi	r3, #2
 8005c20:	6033      	strmi	r3, [r6, #0]
 8005c22:	6825      	ldr	r5, [r4, #0]
 8005c24:	f015 0506 	ands.w	r5, r5, #6
 8005c28:	d106      	bne.n	8005c38 <_printf_common+0x48>
 8005c2a:	f104 0a19 	add.w	sl, r4, #25
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	6832      	ldr	r2, [r6, #0]
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	dc26      	bgt.n	8005c86 <_printf_common+0x96>
 8005c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c3c:	1e13      	subs	r3, r2, #0
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	bf18      	it	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	0692      	lsls	r2, r2, #26
 8005c46:	d42b      	bmi.n	8005ca0 <_printf_common+0xb0>
 8005c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d01e      	beq.n	8005c94 <_printf_common+0xa4>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	68e5      	ldr	r5, [r4, #12]
 8005c5a:	6832      	ldr	r2, [r6, #0]
 8005c5c:	f003 0306 	and.w	r3, r3, #6
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	bf08      	it	eq
 8005c64:	1aad      	subeq	r5, r5, r2
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	bf0c      	ite	eq
 8005c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c70:	2500      	movne	r5, #0
 8005c72:	4293      	cmp	r3, r2
 8005c74:	bfc4      	itt	gt
 8005c76:	1a9b      	subgt	r3, r3, r2
 8005c78:	18ed      	addgt	r5, r5, r3
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	341a      	adds	r4, #26
 8005c7e:	42b5      	cmp	r5, r6
 8005c80:	d11a      	bne.n	8005cb8 <_printf_common+0xc8>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e008      	b.n	8005c98 <_printf_common+0xa8>
 8005c86:	2301      	movs	r3, #1
 8005c88:	4652      	mov	r2, sl
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	47c0      	blx	r8
 8005c90:	3001      	adds	r0, #1
 8005c92:	d103      	bne.n	8005c9c <_printf_common+0xac>
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	e7c6      	b.n	8005c2e <_printf_common+0x3e>
 8005ca0:	18e1      	adds	r1, r4, r3
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	2030      	movs	r0, #48	; 0x30
 8005ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005caa:	4422      	add	r2, r4
 8005cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	e7c7      	b.n	8005c48 <_printf_common+0x58>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4622      	mov	r2, r4
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c0      	blx	r8
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0e6      	beq.n	8005c94 <_printf_common+0xa4>
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7d9      	b.n	8005c7e <_printf_common+0x8e>
	...

08005ccc <_printf_i>:
 8005ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	7e0f      	ldrb	r7, [r1, #24]
 8005cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd4:	2f78      	cmp	r7, #120	; 0x78
 8005cd6:	4691      	mov	r9, r2
 8005cd8:	4680      	mov	r8, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	469a      	mov	sl, r3
 8005cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ce2:	d807      	bhi.n	8005cf4 <_printf_i+0x28>
 8005ce4:	2f62      	cmp	r7, #98	; 0x62
 8005ce6:	d80a      	bhi.n	8005cfe <_printf_i+0x32>
 8005ce8:	2f00      	cmp	r7, #0
 8005cea:	f000 80d8 	beq.w	8005e9e <_printf_i+0x1d2>
 8005cee:	2f58      	cmp	r7, #88	; 0x58
 8005cf0:	f000 80a3 	beq.w	8005e3a <_printf_i+0x16e>
 8005cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cfc:	e03a      	b.n	8005d74 <_printf_i+0xa8>
 8005cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d02:	2b15      	cmp	r3, #21
 8005d04:	d8f6      	bhi.n	8005cf4 <_printf_i+0x28>
 8005d06:	a101      	add	r1, pc, #4	; (adr r1, 8005d0c <_printf_i+0x40>)
 8005d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d0c:	08005d65 	.word	0x08005d65
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005cf5 	.word	0x08005cf5
 8005d18:	08005cf5 	.word	0x08005cf5
 8005d1c:	08005cf5 	.word	0x08005cf5
 8005d20:	08005cf5 	.word	0x08005cf5
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005cf5 	.word	0x08005cf5
 8005d2c:	08005cf5 	.word	0x08005cf5
 8005d30:	08005cf5 	.word	0x08005cf5
 8005d34:	08005cf5 	.word	0x08005cf5
 8005d38:	08005e85 	.word	0x08005e85
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005e67 	.word	0x08005e67
 8005d44:	08005cf5 	.word	0x08005cf5
 8005d48:	08005cf5 	.word	0x08005cf5
 8005d4c:	08005ea7 	.word	0x08005ea7
 8005d50:	08005cf5 	.word	0x08005cf5
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005cf5 	.word	0x08005cf5
 8005d5c:	08005cf5 	.word	0x08005cf5
 8005d60:	08005e6f 	.word	0x08005e6f
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	602a      	str	r2, [r5, #0]
 8005d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0a3      	b.n	8005ec0 <_printf_i+0x1f4>
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	6829      	ldr	r1, [r5, #0]
 8005d7c:	0606      	lsls	r6, r0, #24
 8005d7e:	f101 0304 	add.w	r3, r1, #4
 8005d82:	d50a      	bpl.n	8005d9a <_printf_i+0xce>
 8005d84:	680e      	ldr	r6, [r1, #0]
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	da03      	bge.n	8005d94 <_printf_i+0xc8>
 8005d8c:	232d      	movs	r3, #45	; 0x2d
 8005d8e:	4276      	negs	r6, r6
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	485e      	ldr	r0, [pc, #376]	; (8005f10 <_printf_i+0x244>)
 8005d96:	230a      	movs	r3, #10
 8005d98:	e019      	b.n	8005dce <_printf_i+0x102>
 8005d9a:	680e      	ldr	r6, [r1, #0]
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005da2:	bf18      	it	ne
 8005da4:	b236      	sxthne	r6, r6
 8005da6:	e7ef      	b.n	8005d88 <_printf_i+0xbc>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	6820      	ldr	r0, [r4, #0]
 8005dac:	1d19      	adds	r1, r3, #4
 8005dae:	6029      	str	r1, [r5, #0]
 8005db0:	0601      	lsls	r1, r0, #24
 8005db2:	d501      	bpl.n	8005db8 <_printf_i+0xec>
 8005db4:	681e      	ldr	r6, [r3, #0]
 8005db6:	e002      	b.n	8005dbe <_printf_i+0xf2>
 8005db8:	0646      	lsls	r6, r0, #25
 8005dba:	d5fb      	bpl.n	8005db4 <_printf_i+0xe8>
 8005dbc:	881e      	ldrh	r6, [r3, #0]
 8005dbe:	4854      	ldr	r0, [pc, #336]	; (8005f10 <_printf_i+0x244>)
 8005dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2308      	moveq	r3, #8
 8005dc6:	230a      	movne	r3, #10
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dce:	6865      	ldr	r5, [r4, #4]
 8005dd0:	60a5      	str	r5, [r4, #8]
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	bfa2      	ittt	ge
 8005dd6:	6821      	ldrge	r1, [r4, #0]
 8005dd8:	f021 0104 	bicge.w	r1, r1, #4
 8005ddc:	6021      	strge	r1, [r4, #0]
 8005dde:	b90e      	cbnz	r6, 8005de4 <_printf_i+0x118>
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	d04d      	beq.n	8005e80 <_printf_i+0x1b4>
 8005de4:	4615      	mov	r5, r2
 8005de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dea:	fb03 6711 	mls	r7, r3, r1, r6
 8005dee:	5dc7      	ldrb	r7, [r0, r7]
 8005df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005df4:	4637      	mov	r7, r6
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	460e      	mov	r6, r1
 8005dfa:	d9f4      	bls.n	8005de6 <_printf_i+0x11a>
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10b      	bne.n	8005e18 <_printf_i+0x14c>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	07de      	lsls	r6, r3, #31
 8005e04:	d508      	bpl.n	8005e18 <_printf_i+0x14c>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6861      	ldr	r1, [r4, #4]
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	bfde      	ittt	le
 8005e0e:	2330      	movle	r3, #48	; 0x30
 8005e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e18:	1b52      	subs	r2, r2, r5
 8005e1a:	6122      	str	r2, [r4, #16]
 8005e1c:	f8cd a000 	str.w	sl, [sp]
 8005e20:	464b      	mov	r3, r9
 8005e22:	aa03      	add	r2, sp, #12
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff fee2 	bl	8005bf0 <_printf_common>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d14c      	bne.n	8005eca <_printf_i+0x1fe>
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	b004      	add	sp, #16
 8005e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3a:	4835      	ldr	r0, [pc, #212]	; (8005f10 <_printf_i+0x244>)
 8005e3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e40:	6829      	ldr	r1, [r5, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e48:	6029      	str	r1, [r5, #0]
 8005e4a:	061d      	lsls	r5, r3, #24
 8005e4c:	d514      	bpl.n	8005e78 <_printf_i+0x1ac>
 8005e4e:	07df      	lsls	r7, r3, #31
 8005e50:	bf44      	itt	mi
 8005e52:	f043 0320 	orrmi.w	r3, r3, #32
 8005e56:	6023      	strmi	r3, [r4, #0]
 8005e58:	b91e      	cbnz	r6, 8005e62 <_printf_i+0x196>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f023 0320 	bic.w	r3, r3, #32
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	2310      	movs	r3, #16
 8005e64:	e7b0      	b.n	8005dc8 <_printf_i+0xfc>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	f043 0320 	orr.w	r3, r3, #32
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	2378      	movs	r3, #120	; 0x78
 8005e70:	4828      	ldr	r0, [pc, #160]	; (8005f14 <_printf_i+0x248>)
 8005e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e76:	e7e3      	b.n	8005e40 <_printf_i+0x174>
 8005e78:	0659      	lsls	r1, r3, #25
 8005e7a:	bf48      	it	mi
 8005e7c:	b2b6      	uxthmi	r6, r6
 8005e7e:	e7e6      	b.n	8005e4e <_printf_i+0x182>
 8005e80:	4615      	mov	r5, r2
 8005e82:	e7bb      	b.n	8005dfc <_printf_i+0x130>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	6826      	ldr	r6, [r4, #0]
 8005e88:	6961      	ldr	r1, [r4, #20]
 8005e8a:	1d18      	adds	r0, r3, #4
 8005e8c:	6028      	str	r0, [r5, #0]
 8005e8e:	0635      	lsls	r5, r6, #24
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	d501      	bpl.n	8005e98 <_printf_i+0x1cc>
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	e002      	b.n	8005e9e <_printf_i+0x1d2>
 8005e98:	0670      	lsls	r0, r6, #25
 8005e9a:	d5fb      	bpl.n	8005e94 <_printf_i+0x1c8>
 8005e9c:	8019      	strh	r1, [r3, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	4615      	mov	r5, r2
 8005ea4:	e7ba      	b.n	8005e1c <_printf_i+0x150>
 8005ea6:	682b      	ldr	r3, [r5, #0]
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	602a      	str	r2, [r5, #0]
 8005eac:	681d      	ldr	r5, [r3, #0]
 8005eae:	6862      	ldr	r2, [r4, #4]
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f7fa f994 	bl	80001e0 <memchr>
 8005eb8:	b108      	cbz	r0, 8005ebe <_printf_i+0x1f2>
 8005eba:	1b40      	subs	r0, r0, r5
 8005ebc:	6060      	str	r0, [r4, #4]
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	6123      	str	r3, [r4, #16]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec8:	e7a8      	b.n	8005e1c <_printf_i+0x150>
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	47d0      	blx	sl
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d0ab      	beq.n	8005e30 <_printf_i+0x164>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	079b      	lsls	r3, r3, #30
 8005edc:	d413      	bmi.n	8005f06 <_printf_i+0x23a>
 8005ede:	68e0      	ldr	r0, [r4, #12]
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	4298      	cmp	r0, r3
 8005ee4:	bfb8      	it	lt
 8005ee6:	4618      	movlt	r0, r3
 8005ee8:	e7a4      	b.n	8005e34 <_printf_i+0x168>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4632      	mov	r2, r6
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	47d0      	blx	sl
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d09b      	beq.n	8005e30 <_printf_i+0x164>
 8005ef8:	3501      	adds	r5, #1
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	9903      	ldr	r1, [sp, #12]
 8005efe:	1a5b      	subs	r3, r3, r1
 8005f00:	42ab      	cmp	r3, r5
 8005f02:	dcf2      	bgt.n	8005eea <_printf_i+0x21e>
 8005f04:	e7eb      	b.n	8005ede <_printf_i+0x212>
 8005f06:	2500      	movs	r5, #0
 8005f08:	f104 0619 	add.w	r6, r4, #25
 8005f0c:	e7f5      	b.n	8005efa <_printf_i+0x22e>
 8005f0e:	bf00      	nop
 8005f10:	08006279 	.word	0x08006279
 8005f14:	0800628a 	.word	0x0800628a

08005f18 <memcpy>:
 8005f18:	440a      	add	r2, r1
 8005f1a:	4291      	cmp	r1, r2
 8005f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f20:	d100      	bne.n	8005f24 <memcpy+0xc>
 8005f22:	4770      	bx	lr
 8005f24:	b510      	push	{r4, lr}
 8005f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	d1f9      	bne.n	8005f26 <memcpy+0xe>
 8005f32:	bd10      	pop	{r4, pc}

08005f34 <memmove>:
 8005f34:	4288      	cmp	r0, r1
 8005f36:	b510      	push	{r4, lr}
 8005f38:	eb01 0402 	add.w	r4, r1, r2
 8005f3c:	d902      	bls.n	8005f44 <memmove+0x10>
 8005f3e:	4284      	cmp	r4, r0
 8005f40:	4623      	mov	r3, r4
 8005f42:	d807      	bhi.n	8005f54 <memmove+0x20>
 8005f44:	1e43      	subs	r3, r0, #1
 8005f46:	42a1      	cmp	r1, r4
 8005f48:	d008      	beq.n	8005f5c <memmove+0x28>
 8005f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f52:	e7f8      	b.n	8005f46 <memmove+0x12>
 8005f54:	4402      	add	r2, r0
 8005f56:	4601      	mov	r1, r0
 8005f58:	428a      	cmp	r2, r1
 8005f5a:	d100      	bne.n	8005f5e <memmove+0x2a>
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f66:	e7f7      	b.n	8005f58 <memmove+0x24>

08005f68 <_free_r>:
 8005f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f6a:	2900      	cmp	r1, #0
 8005f6c:	d044      	beq.n	8005ff8 <_free_r+0x90>
 8005f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f72:	9001      	str	r0, [sp, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f1a1 0404 	sub.w	r4, r1, #4
 8005f7a:	bfb8      	it	lt
 8005f7c:	18e4      	addlt	r4, r4, r3
 8005f7e:	f000 f913 	bl	80061a8 <__malloc_lock>
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <_free_r+0x94>)
 8005f84:	9801      	ldr	r0, [sp, #4]
 8005f86:	6813      	ldr	r3, [r2, #0]
 8005f88:	b933      	cbnz	r3, 8005f98 <_free_r+0x30>
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	6014      	str	r4, [r2, #0]
 8005f8e:	b003      	add	sp, #12
 8005f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f94:	f000 b90e 	b.w	80061b4 <__malloc_unlock>
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	d908      	bls.n	8005fae <_free_r+0x46>
 8005f9c:	6825      	ldr	r5, [r4, #0]
 8005f9e:	1961      	adds	r1, r4, r5
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf01      	itttt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	1949      	addeq	r1, r1, r5
 8005faa:	6021      	streq	r1, [r4, #0]
 8005fac:	e7ed      	b.n	8005f8a <_free_r+0x22>
 8005fae:	461a      	mov	r2, r3
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b10b      	cbz	r3, 8005fb8 <_free_r+0x50>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d9fa      	bls.n	8005fae <_free_r+0x46>
 8005fb8:	6811      	ldr	r1, [r2, #0]
 8005fba:	1855      	adds	r5, r2, r1
 8005fbc:	42a5      	cmp	r5, r4
 8005fbe:	d10b      	bne.n	8005fd8 <_free_r+0x70>
 8005fc0:	6824      	ldr	r4, [r4, #0]
 8005fc2:	4421      	add	r1, r4
 8005fc4:	1854      	adds	r4, r2, r1
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	d1e0      	bne.n	8005f8e <_free_r+0x26>
 8005fcc:	681c      	ldr	r4, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	6053      	str	r3, [r2, #4]
 8005fd2:	4421      	add	r1, r4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	e7da      	b.n	8005f8e <_free_r+0x26>
 8005fd8:	d902      	bls.n	8005fe0 <_free_r+0x78>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	e7d6      	b.n	8005f8e <_free_r+0x26>
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	1961      	adds	r1, r4, r5
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf04      	itt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	bf04      	itt	eq
 8005ff0:	1949      	addeq	r1, r1, r5
 8005ff2:	6021      	streq	r1, [r4, #0]
 8005ff4:	6054      	str	r4, [r2, #4]
 8005ff6:	e7ca      	b.n	8005f8e <_free_r+0x26>
 8005ff8:	b003      	add	sp, #12
 8005ffa:	bd30      	pop	{r4, r5, pc}
 8005ffc:	20000174 	.word	0x20000174

08006000 <sbrk_aligned>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	4e0e      	ldr	r6, [pc, #56]	; (800603c <sbrk_aligned+0x3c>)
 8006004:	460c      	mov	r4, r1
 8006006:	6831      	ldr	r1, [r6, #0]
 8006008:	4605      	mov	r5, r0
 800600a:	b911      	cbnz	r1, 8006012 <sbrk_aligned+0x12>
 800600c:	f000 f8bc 	bl	8006188 <_sbrk_r>
 8006010:	6030      	str	r0, [r6, #0]
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	f000 f8b7 	bl	8006188 <_sbrk_r>
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	d00a      	beq.n	8006034 <sbrk_aligned+0x34>
 800601e:	1cc4      	adds	r4, r0, #3
 8006020:	f024 0403 	bic.w	r4, r4, #3
 8006024:	42a0      	cmp	r0, r4
 8006026:	d007      	beq.n	8006038 <sbrk_aligned+0x38>
 8006028:	1a21      	subs	r1, r4, r0
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f8ac 	bl	8006188 <_sbrk_r>
 8006030:	3001      	adds	r0, #1
 8006032:	d101      	bne.n	8006038 <sbrk_aligned+0x38>
 8006034:	f04f 34ff 	mov.w	r4, #4294967295
 8006038:	4620      	mov	r0, r4
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	20000178 	.word	0x20000178

08006040 <_malloc_r>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	1ccd      	adds	r5, r1, #3
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	2d00      	cmp	r5, #0
 8006054:	4607      	mov	r7, r0
 8006056:	db01      	blt.n	800605c <_malloc_r+0x1c>
 8006058:	42a9      	cmp	r1, r5
 800605a:	d905      	bls.n	8006068 <_malloc_r+0x28>
 800605c:	230c      	movs	r3, #12
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	2600      	movs	r6, #0
 8006062:	4630      	mov	r0, r6
 8006064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006068:	4e2e      	ldr	r6, [pc, #184]	; (8006124 <_malloc_r+0xe4>)
 800606a:	f000 f89d 	bl	80061a8 <__malloc_lock>
 800606e:	6833      	ldr	r3, [r6, #0]
 8006070:	461c      	mov	r4, r3
 8006072:	bb34      	cbnz	r4, 80060c2 <_malloc_r+0x82>
 8006074:	4629      	mov	r1, r5
 8006076:	4638      	mov	r0, r7
 8006078:	f7ff ffc2 	bl	8006000 <sbrk_aligned>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	4604      	mov	r4, r0
 8006080:	d14d      	bne.n	800611e <_malloc_r+0xde>
 8006082:	6834      	ldr	r4, [r6, #0]
 8006084:	4626      	mov	r6, r4
 8006086:	2e00      	cmp	r6, #0
 8006088:	d140      	bne.n	800610c <_malloc_r+0xcc>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	4631      	mov	r1, r6
 800608e:	4638      	mov	r0, r7
 8006090:	eb04 0803 	add.w	r8, r4, r3
 8006094:	f000 f878 	bl	8006188 <_sbrk_r>
 8006098:	4580      	cmp	r8, r0
 800609a:	d13a      	bne.n	8006112 <_malloc_r+0xd2>
 800609c:	6821      	ldr	r1, [r4, #0]
 800609e:	3503      	adds	r5, #3
 80060a0:	1a6d      	subs	r5, r5, r1
 80060a2:	f025 0503 	bic.w	r5, r5, #3
 80060a6:	3508      	adds	r5, #8
 80060a8:	2d0c      	cmp	r5, #12
 80060aa:	bf38      	it	cc
 80060ac:	250c      	movcc	r5, #12
 80060ae:	4629      	mov	r1, r5
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ffa5 	bl	8006000 <sbrk_aligned>
 80060b6:	3001      	adds	r0, #1
 80060b8:	d02b      	beq.n	8006112 <_malloc_r+0xd2>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	442b      	add	r3, r5
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	e00e      	b.n	80060e0 <_malloc_r+0xa0>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	1b52      	subs	r2, r2, r5
 80060c6:	d41e      	bmi.n	8006106 <_malloc_r+0xc6>
 80060c8:	2a0b      	cmp	r2, #11
 80060ca:	d916      	bls.n	80060fa <_malloc_r+0xba>
 80060cc:	1961      	adds	r1, r4, r5
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	6025      	str	r5, [r4, #0]
 80060d2:	bf18      	it	ne
 80060d4:	6059      	strne	r1, [r3, #4]
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	bf08      	it	eq
 80060da:	6031      	streq	r1, [r6, #0]
 80060dc:	5162      	str	r2, [r4, r5]
 80060de:	604b      	str	r3, [r1, #4]
 80060e0:	4638      	mov	r0, r7
 80060e2:	f104 060b 	add.w	r6, r4, #11
 80060e6:	f000 f865 	bl	80061b4 <__malloc_unlock>
 80060ea:	f026 0607 	bic.w	r6, r6, #7
 80060ee:	1d23      	adds	r3, r4, #4
 80060f0:	1af2      	subs	r2, r6, r3
 80060f2:	d0b6      	beq.n	8006062 <_malloc_r+0x22>
 80060f4:	1b9b      	subs	r3, r3, r6
 80060f6:	50a3      	str	r3, [r4, r2]
 80060f8:	e7b3      	b.n	8006062 <_malloc_r+0x22>
 80060fa:	6862      	ldr	r2, [r4, #4]
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	bf0c      	ite	eq
 8006100:	6032      	streq	r2, [r6, #0]
 8006102:	605a      	strne	r2, [r3, #4]
 8006104:	e7ec      	b.n	80060e0 <_malloc_r+0xa0>
 8006106:	4623      	mov	r3, r4
 8006108:	6864      	ldr	r4, [r4, #4]
 800610a:	e7b2      	b.n	8006072 <_malloc_r+0x32>
 800610c:	4634      	mov	r4, r6
 800610e:	6876      	ldr	r6, [r6, #4]
 8006110:	e7b9      	b.n	8006086 <_malloc_r+0x46>
 8006112:	230c      	movs	r3, #12
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4638      	mov	r0, r7
 8006118:	f000 f84c 	bl	80061b4 <__malloc_unlock>
 800611c:	e7a1      	b.n	8006062 <_malloc_r+0x22>
 800611e:	6025      	str	r5, [r4, #0]
 8006120:	e7de      	b.n	80060e0 <_malloc_r+0xa0>
 8006122:	bf00      	nop
 8006124:	20000174 	.word	0x20000174

08006128 <_realloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	4680      	mov	r8, r0
 800612e:	4614      	mov	r4, r2
 8006130:	460e      	mov	r6, r1
 8006132:	b921      	cbnz	r1, 800613e <_realloc_r+0x16>
 8006134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	4611      	mov	r1, r2
 800613a:	f7ff bf81 	b.w	8006040 <_malloc_r>
 800613e:	b92a      	cbnz	r2, 800614c <_realloc_r+0x24>
 8006140:	f7ff ff12 	bl	8005f68 <_free_r>
 8006144:	4625      	mov	r5, r4
 8006146:	4628      	mov	r0, r5
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	f000 f838 	bl	80061c0 <_malloc_usable_size_r>
 8006150:	4284      	cmp	r4, r0
 8006152:	4607      	mov	r7, r0
 8006154:	d802      	bhi.n	800615c <_realloc_r+0x34>
 8006156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800615a:	d812      	bhi.n	8006182 <_realloc_r+0x5a>
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff ff6e 	bl	8006040 <_malloc_r>
 8006164:	4605      	mov	r5, r0
 8006166:	2800      	cmp	r0, #0
 8006168:	d0ed      	beq.n	8006146 <_realloc_r+0x1e>
 800616a:	42bc      	cmp	r4, r7
 800616c:	4622      	mov	r2, r4
 800616e:	4631      	mov	r1, r6
 8006170:	bf28      	it	cs
 8006172:	463a      	movcs	r2, r7
 8006174:	f7ff fed0 	bl	8005f18 <memcpy>
 8006178:	4631      	mov	r1, r6
 800617a:	4640      	mov	r0, r8
 800617c:	f7ff fef4 	bl	8005f68 <_free_r>
 8006180:	e7e1      	b.n	8006146 <_realloc_r+0x1e>
 8006182:	4635      	mov	r5, r6
 8006184:	e7df      	b.n	8006146 <_realloc_r+0x1e>
	...

08006188 <_sbrk_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	; (80061a4 <_sbrk_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fa fcfc 	bl	8000b90 <_sbrk>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_sbrk_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_sbrk_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	2000017c 	.word	0x2000017c

080061a8 <__malloc_lock>:
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <__malloc_lock+0x8>)
 80061aa:	f000 b811 	b.w	80061d0 <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	20000180 	.word	0x20000180

080061b4 <__malloc_unlock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__malloc_unlock+0x8>)
 80061b6:	f000 b80c 	b.w	80061d2 <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	20000180 	.word	0x20000180

080061c0 <_malloc_usable_size_r>:
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f18      	subs	r0, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfbc      	itt	lt
 80061ca:	580b      	ldrlt	r3, [r1, r0]
 80061cc:	18c0      	addlt	r0, r0, r3
 80061ce:	4770      	bx	lr

080061d0 <__retarget_lock_acquire_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_release_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <_init>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr

080061e0 <_fini>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr
